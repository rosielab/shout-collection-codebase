{"version":3,"sources":["commons/components/ActionCard.component.tsx","commons/pages/rosie.png","commons/pages/logo.png","commons/pages/HomePage.tsx","activities/DonateShouts/pages/InstructionsPage.tsx","activities/DonateShouts/pages/ThankYouPage.tsx","activities/DonateShouts/components/fieldTypes/FieldType.component.tsx","activities/DonateShouts/pages/QuestionsPage.tsx","activities/DonateShouts/pages/RecordingPage.tsx","activities/DonateShouts/components/recorder/recorderSettings.ts","activities/DonateShouts/components/recorder/Timer.component.tsx","activities/DonateShouts/components/recorder/Recorder.component.tsx","activities/DonateShouts/helpers/questions.ts","activities/DonateShouts/components/alerts/SubmitAlert.component.tsx","activities/DonateShouts/helpers/consentInfo.ts","activities/DonateShouts/pages/ConsentPage.tsx","activities/DonateShouts/helpers/userAnswers.ts","activities/DonateShouts/components/alerts/MessageAlert.component.tsx","activities/DonateShouts/apis/apis.ts","activities/DonateShouts/hooks/useInterval.js","activities/DonateShouts/helpers/wizardHelpers.tsx","activities/DonateShouts/components/Wizard.component.tsx","activities/DonateShouts/helpers/validator.ts","activities/DonateShouts/themedStyles.ts","commons/routes/routes.ts","activities/DonateShouts/DonateShouts.component.tsx","commons/pages/OurPurpose.tsx","commons/components/NavBar.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionCard","imageUrl","imageAlt","header","body","onClick","Card","sx","maxWidth","minWidth","minHeight","margin","style","backgroundColor","CardActionArea","height","CardMedia","component","image","alt","CardContent","Typography","gutterBottom","variant","align","color","WebsiteInfo","Container","Grid","container","direction","alignItems","spacing","item","xs","md","src","rosie","maxHeight","logo","marginBottom","marginTop","Link","href","underline","InstructionsPage","fontWeight","ThankYouPage","to","FieldType","answerKey","options","questionType","question","getCurVal","handleChange","keysToClear","FormControl","RadioGroup","display","onChange","e","target","value","name","map","option","Box","FormControlLabel","control","Radio","label","TextField","autoFocus","width","inputProps","autoComplete","FormGroup","Checkbox","checked","Autocomplete","disablePortal","id","getOptionLabel","renderOption","props","isOptionEqualToValue","event","renderInput","params","QuestionsPage","answers","setAnswer","triggerAlert","history","useHistory","goHome","useCallback","push","routePaths","ACTIVITIES","flexDirection","key","clearIfChange","requireAlert","condition","message","title","updatedAnswers","forEach","type","RecordingPage","phonePosition","script","affect","PhonePosition","paddingX","fontSize","sm","Affect","Script","flex","justifyContent","textAlign","rtcSettings","mimeType","recorderType","StereoAudioRecorder","disableLogs","timeSlice","ondataavailable","blob","checkForInactiveTracks","onTimeStamp","timestamp","bitsPerSecond","audioBitsPerSecond","videoBitsPerSecond","frameInterval","previewStream","stream","bufferSize","numberOfAudioChannels","frameRate","bitrate","elementClass","Timer","className","secs","hr","Math","floor","min","sec","minStr","toString","secStr","calculateTimeDuration","time","overtimeMessage","PauseButton","Tooltip","arrow","background","padding","borderRadius","RecordButton","Recorder","setRecordingBlob","displayMessageAlert","useState","audio","setAudio","recorder","setRecorder","url","setUrl","setTime","isActive","setIsActive","isPaused","setIsPaused","showAudioHTML","setShowAudioHTML","timeStarted","setTimeStarted","useEffect","interval","setInterval","Date","getTime","clearInterval","handleStartTimer","audioStopped","a","toURL","getBlob","getTracks","track","stop","getMedia","constraints","video","navigator","mediaDevices","getUserMedia","rtc","RecordRTC","setRecordingDuration","stopRecording","startRecording","DOMException","toggleMic","flexWrap","Button","controls","ALERT_MODE","AGE_RANGES","questions","consentInfo","ConsentPage","hasUserConsentResearch","hasUserConsentCommercial","setHasUserConsentResearch","setHasUserConsentCommercial","info","index","oldAnswer","consentcommercial","formatUserData","SubmitAlert","open","setOpen","handleAgreeSubmit","alertMode","handleClose","isLoadingModal","LOADING","showCancelButton","INFORM","disableSubmit","setDisableSubmit","Dialog","onClose","DialogTitle","SUCCESS","FAILED","DialogContent","CircularProgress","DialogContentText","content","DialogActions","marginRight","handleCta","disabled","buttonText","MessageAlert","cta","buttonTitle","IconButton","sendS3","metaData","uuid","fileName","axios","post","fileType","response","signedPostRequest","data","fields","headers","bodyFormData","FormData","append","Error","sendUserData","URL","status","statusText","pollResults","audioID","process","REACT_APP_POLL_RESULTS","get","isAxiosError","STEP_PAGE","length","INFO_PAGE","scriptObj","affectObj","phonePositions","getRandomIntInclusive","max","ceil","random","Wizard","step","setStep","canonicalUserID","setCanonicalUserID","userID","age","gender","firstLanguage","currentLanguage","phoneModel","consentresearch","getUserAnswersDefaultState","useCookies","stepCookies","setStepCookie","removeStepCookie","userCookies","setUserCookie","removeUserCookie","newUser","setNewUser","undefined","path","showSubmitAudioModal","setShowSubmitAudioModal","showMessageAlert","setShowMessageAlert","messageAlert","setMessageAlert","setAlertMode","recordingBlob","audioId","setAudioId","pollFlag","setPollFlag","pollingRetriesCount","setPollingRetriesCount","allRecordingPageData","setAllRecordingPageData","handleAnswerChange","answer","handleNextStep","onRecordingPage","formatData","MAX_PAGES","pages","recordingPages","useMemo","idx","Object","keys","prevAllRecordingPageData","phoneposition","pagesBeforeRecordingPages","pagesAfterRecordingPages","FIRST_RECORDING","processAudio","fileID","console","log","callback","delay","flag","savedCallback","useRef","current","useInterval","fetchData","showBackButton","showNextButton","Paper","parseInt","order","inputItem","CONSENT_PAGE","QUESTION_END","QUESTION_START","curQuestions","followUpQuestions","isMainQuestionAnswered","areFollowUpQuestionsAnswered","every","isFollowUpQuestionAnswered","userQuestionAnswerValid","marginLeft","themedStyles","createTheme","palette","primary","light","main","dark","contrastText","neutral","components","MuiFilledInput","styleOverrides","root","MuiInputLabel","DONATE_SHOUTS","OUR_PURPOSE","routes","handleClick","route","activityList","onclick","activity","ThemeProvider","theme","NavBar","anchorElNav","setAnchorElNav","handleNavigation","AppBar","position","Toolbar","disableGutters","noWrap","mr","flexGrow","size","currentTarget","Menu","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","Boolean","MenuItem","fontFamily","cursor","my","App","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CookiesProvider","document","getElementById"],"mappings":"sWAce,SAASA,EAAT,GAMM,IALjBC,EAKgB,EALhBA,SACAC,EAIgB,EAJhBA,SACAC,EAGgB,EAHhBA,OACAC,EAEgB,EAFhBA,KACAC,EACgB,EADhBA,QAEA,OACI,cAACC,EAAA,EAAD,CACEC,GAAI,CAAEC,SAAU,IAAKC,SAAU,IAAKC,UAAW,IAAKC,OAAQ,GAC5DC,MAAO,CAACC,gBAAiB,WAF3B,SAII,eAACC,EAAA,EAAD,CAAgBP,GAAI,CAAEQ,OAAQ,QAAUV,QAASA,EAAjD,UACKJ,GACG,cAACe,EAAA,EAAD,CACIC,UAAU,MACVF,OAAO,MACPG,MAAOjB,EACPkB,IAAKjB,IAGb,eAACkB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CACEC,cAAY,EAACC,QAAQ,KAAKN,UAAU,MACpCO,MAAM,SACNC,MAAM,UAHR,SAKKtB,IAEL,cAACkB,EAAA,EAAD,CACEE,QAAQ,QAAQE,MAAM,UACtBD,MAAM,SAFR,SAIKpB,YC/CV,UAA0B,kCCA1B,MAA0B,iCCQnCsB,EAAc,WAChB,OACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,WAAW,SAASC,QAAS,EAA7D,UACE,cAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,SACE,qBACIC,IAAKC,EACLlB,IAAI,aACJP,MAAO,CACHJ,SAAU,MACV8B,UAAW,WAIrB,cAACV,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,SACE,qBACIC,IAAKG,EACLpB,IAAI,cACJP,MAAO,CACHJ,SAAU,MACV8B,UAAW,WAIrB,eAACV,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAf,UACI,cAACb,EAAA,EAAD,CAAYE,QAAQ,KAAKhB,GAAI,CAAEiC,aAAc,EAAGC,UAAW,GAAIjB,MAAM,SAArE,+DAGA,eAACH,EAAA,EAAD,CAAYG,MAAM,SAAlB,mOAKI,cAACkB,EAAA,EAAD,CAAMC,KAAK,2BAA2BC,UAAU,OAAhD,yBALJ,+KAWI,cAACF,EAAA,EAAD,CAAMC,KAAK,cAAcC,UAAU,OAAnC,yBAXJ,mH,gEClCLC,EAAmB,WAC5B,OACI,eAAClB,EAAA,EAAD,WACI,cAACN,EAAA,EAAD,CACIE,QAAQ,KACRhB,GAAI,CAAEuC,WAAY,OAAQN,aAAc,GAF5C,+CAMA,cAACnB,EAAA,EAAD,CAAYE,QAAQ,QAAQhB,GAAI,CAAEiC,aAAc,GAAhD,4OAMA,eAACnB,EAAA,EAAD,+BAEI,+BACI,8DACA,oDACA,qFAGR,eAACA,EAAA,EAAD,4CAEI,+BACI,2GAIA,yFAGA,+IAMR,eAACA,EAAA,EAAD,6PAKI,+BACI,8DACA,8DACA,kEARR,8EAaA,cAACA,EAAA,EAAD,qLCnDC0B,EAAe,WACxB,OACI,eAACpB,EAAA,EAAD,WACI,cAACN,EAAA,EAAD,CACIE,QAAQ,KACRhB,GAAI,CACAuC,WAAY,OACZrB,MAAO,eACPe,aAAc,GALtB,4DAUA,cAACnB,EAAA,EAAD,CAAYE,QAAQ,QAAQhB,GAAI,CAAEiC,aAAc,GAAhD,qHAIA,eAACnB,EAAA,EAAD,CAAYE,QAAQ,QAAQhB,GAAI,CAAEiC,aAAc,GAAhD,UACK,SACD,eAAC,IAAD,CAAMQ,GAAG,IAAIpC,MAAO,CAAEa,MAAO,WAA7B,UACI,sBAAM,cAAY,SADtB,UAIC,sD,uFCHJwB,EAAY,SAAC,GAQH,IAPnBC,EAOkB,EAPlBA,UACAC,EAMkB,EANlBA,QACAC,EAKkB,EALlBA,aACAC,EAIkB,EAJlBA,SACAC,EAGkB,EAHlBA,UACAC,EAEkB,EAFlBA,aACAC,EACkB,EADlBA,YAEA,OAAQJ,GACJ,IAAK,QACD,OACI,eAACK,EAAA,EAAD,CAAalD,GAAI,CAAEiC,aAAc,GAAKvB,UAAU,WAAhD,UACI,cAACI,EAAA,EAAD,CAAYd,GAAI,CAAEuC,WAAY,OAAQN,aAAc,GAApD,SACKa,IAEL,cAACK,EAAA,EAAD,CACInD,GAAI,CAAEoD,QAAS,eACfC,SAAU,SAACC,GAAD,OACNN,EAAaL,EAAWW,EAAEC,OAAOC,MAAOP,IAE5CO,MAAOT,EAAUJ,GACjBc,KAAK,sBANT,SAQKb,EAAQc,KAAI,SAACC,GACV,OACI,cAACC,EAAA,EAAD,CAAkB5D,GAAI,CAAEiC,aAAc,GAAtC,SACI,cAAC4B,EAAA,EAAD,CAEIL,MAAOG,EACPG,QAAS,cAACC,EAAA,EAAD,IACTC,MAAOL,GAHFA,IAFHA,WAclC,IAAK,OACD,OACI,qCACI,cAAC7C,EAAA,EAAD,CAAYd,GAAI,CAAEuC,WAAY,OAAQN,aAAc,GAApD,SACKa,IAEL,cAACmB,EAAA,EAAD,CACIC,WAAS,EACTF,MAAO,iBACPhE,GAAI,CAAEmE,MAAO,QACbX,MAAOT,EAAUJ,IAAc,GAC/BU,SAAU,SAACC,GAAD,OACNN,EAAaL,EAAWW,EAAEC,OAAOC,MAAOP,IAE5CmB,WAAY,CACRC,aAAc,YAMlC,IAAK,eACD,OACI,eAACnB,EAAA,EAAD,CAAalD,GAAI,CAAEiC,aAAc,GAAjC,UACKa,GACG,cAAChC,EAAA,EAAD,CACId,GAAI,CAAEuC,WAAY,OAAQN,aAAc,GAD5C,SAGKa,IAGT,cAACwB,EAAA,EAAD,CAAWtE,GAAI,CAAEoD,QAAS,eAA1B,SACKR,EAAQc,KAAI,SAACC,GACV,OACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAEIL,MAAOG,EACPK,MAAOL,EACPG,QACI,cAACS,EAAA,EAAD,CACIC,QACIb,IACAZ,EAAUJ,GAEdU,SAAU,SAACC,GAAD,OACNN,EACIL,EACAI,EAAUJ,KACNgB,EACE,KACAA,EACNV,OAhBXU,IAFHA,WA+BlC,IAAK,eACD,OACI,qCACI,cAAC7C,EAAA,EAAD,CAAYd,GAAI,CAAEuC,WAAY,OAAQN,aAAc,GAApD,SACKa,IAEL,cAAC2B,EAAA,EAAD,CACIC,eAAa,EACblB,MAAOT,EAAUJ,IAAc,KAC/BgC,GAAG,iBACH/B,QAASA,EACT5C,GAAI,CAAEC,SAAU,IAAKgC,aAAc,GACnC2C,eAAgB,SAACjB,GAAD,OAAiBA,GACjCkB,aAAc,SAACC,EAAOnB,GAAR,OACV,cAACC,EAAA,EAAD,yBAAKlD,UAAU,MAASoE,GAAxB,aACKnB,MAGToB,qBAAsB,SAACpB,EAAQH,GAAT,OAClBG,IAAWH,GACD,2BAAVA,GAEJH,SAAU,SAAC2B,EAAOxB,GAAR,OACNR,EAAaL,EAAWa,EAAOP,IAEnCgC,YAAa,SAACC,GAAD,OACT,cAACjB,EAAA,EAAD,2BACQiB,GADR,IAEIlB,MAAM,oBACNI,WAAU,2BACHc,EAAOd,YADJ,IAENC,aAAc,iBAQ1C,QACI,OAAO,+BCtJNc,EAAgB,SAAC,GAKH,IAJvBrC,EAIsB,EAJtBA,SACAsC,EAGsB,EAHtBA,QACAC,EAEsB,EAFtBA,UACAC,EACsB,EADtBA,aAEIC,EAAUC,cAERC,EAASC,uBAAY,WACvBH,EAAQI,KAAKC,GAAWC,cACzB,CAACN,IA6BJ,OACI,cAACnE,EAAA,EAAD,CAAWpB,GAAI,CAAEoD,QAAS,OAAQ0C,cAAe,UAAjD,SACI,cAAC,EAAD,CACI9C,aA9BS,SAAC+C,EAAavC,EAAYwC,IAG/B,OAARlD,QAAQ,IAARA,OAAA,EAAAA,EAAUmD,eACVnD,EAASmD,aAAaC,YAAc1C,GAEpC8B,EACIxC,EAASmD,aAAaE,QACtBrD,EAASmD,aAAaG,MACtBX,EACA,WAGR,IAAMY,EAAc,eAAMN,EAAMvC,GAC5BwC,GAEAA,EAAcM,SAAQ,SAACP,GACnBM,EAAeN,GAAO,QAG9BV,EAAU,2BAAKD,GAAYiB,KAWnBtD,UARM,SAACgD,GACf,OAAOX,EAAQW,IASPjD,SAAUA,EAASA,SACnBH,UAAWG,EAASiD,IACpBnD,QAASE,EAASF,QAClBC,aAAcC,EAASyD,KACvBtD,YAAW,OAAEH,QAAF,IAAEA,OAAF,EAAEA,EAAUkD,eALlBlD,EAASiD,QCtDjBS,EAAgB,SAAC,GAIH,IAHvBC,EAGsB,EAHtBA,cACAC,EAEsB,EAFtBA,OACAC,EACsB,EADtBA,OAEMC,EAAgB,WAClB,OACI,cAACxF,EAAA,EAAD,CAAWpB,GAAI,CAAE6G,SAAU,GAA3B,SACI,cAAC/F,EAAA,EAAD,CACIE,QAAQ,KACRuB,WAAW,iBACXvC,GAAI,CAAE8G,SAAU,CAAEnF,GAAI,GAAIoF,GAAI,GAAInF,GAAI,KAH1C,SAKK6E,OAMXO,EAAS,WACX,OACI,cAAC5F,EAAA,EAAD,CAAWpB,GAAI,CAAE6G,SAAU,GAA3B,SACI,eAAC/F,EAAA,EAAD,CACIE,QAAQ,KACRhB,GAAI,CACAkB,MAAO,eACPd,OAAQ,EACR0G,SAAU,CAAEnF,GAAI,GAAIoF,GAAI,GAAInF,GAAI,KAEpCW,WAAW,iBAPf,sCAS8BoE,QAMpCM,EAAS,WACX,OACI,eAAC7F,EAAA,EAAD,CAAWpB,GAAI,CAAE6G,SAAU,GAA3B,UACI,eAAC/F,EAAA,EAAD,CACIE,QAAQ,KACRuB,WAAW,iBACXvC,GAAI,CAAE8G,SAAU,CAAEnF,GAAI,GAAIoF,GAAI,GAAInF,GAAI,KAH1C,wBAKgB8E,EALhB,OAOA,eAAC5F,EAAA,EAAD,CACIE,QAAQ,KACRuB,WAAW,iBACXvC,GAAI,CAAE8G,SAAU,CAAEnF,GAAI,GAAIoF,GAAI,GAAInF,GAAI,KAH1C,wBAKgB8E,EALhB,OAOA,eAAC5F,EAAA,EAAD,CACIE,QAAQ,KACRuB,WAAW,iBACXvC,GAAI,CACAiC,aAAc,EACd6E,SAAU,CAAEnF,GAAI,GAAIoF,GAAI,GAAInF,GAAI,KALxC,yBAQiB8E,EARjB,OAUA,cAAC5F,EAAA,EAAD,CACIE,QAAQ,KACRhB,GAAI,CAAE8G,SAAU,CAAEnF,GAAI,GAAIoF,GAAI,GAAInF,GAAI,KAF1C,mKAYZ,OACI,eAACR,EAAA,EAAD,CACIpB,GAAI,CACAkH,KAAM,EACN9D,QAAS,OACT0C,cAAe,SACfqB,eAAgB,SAChBC,UAAW,SACXnF,aAAc,EACd4E,SAAU,GARlB,UAWI,cAACD,EAAD,IACA,cAACI,EAAD,IACA,cAACC,EAAD,Q,oBChGCI,GAAmB,CAE5Bd,KAAM,QACNe,SAAU,YAIVC,aAAcC,uBAGdC,aAAa,EAIbC,UAAW,IAIXC,gBAAiB,SAAUC,KAG3BC,wBAAwB,EAGxBC,YAAa,SAAUC,KAGvBC,cAAe,MAIfC,mBAAoB,MAGpBC,mBAAoB,MAIpBC,cAAe,GAIfC,cAAe,SAAUC,KAczBC,WAAY,MAIZC,sBAAuB,EAGvBC,UAAW,GAGXC,QAAS,MAGTC,aAAc,uBCnEH,SAASC,GAAM7D,GAgB1B,OACI,qBACI8D,UAAU,QACVvI,MAAO,CAAE+C,QAAS,OAAQ5B,WAAY,UAF1C,SAII,cAACV,EAAA,EAAD,CAAYE,QAAQ,KAAK4H,UAAU,SAAnC,SApBR,SAA+BC,GAC3B,IAAMC,EAAKC,KAAKC,MAAMH,EAAO,MACvBI,EAAMF,KAAKC,OAAOH,EAAY,KAALC,GAAa,IACtCI,EAAMH,KAAKC,MAAMH,EAAY,KAALC,EAAkB,GAANG,GAEpCE,EAASF,EAAM,GAAK,IAAMA,EAAIG,WAAaH,EAAIG,WAC/CC,EAASH,EAAM,GAAK,IAAMA,EAAIE,WAAaF,EAAIE,WAErD,OAAIN,GAAM,EACCK,EAAS,IAAME,EAGpB,GAAN,OAAUP,EAAV,YAAgBK,EAAhB,YAA0BE,GASjBC,CAAsBxE,EAAMyE,U,wDCZvCC,GACF,yIAEEC,GAAc,kBAChB,cAACC,GAAA,EAAD,CAAStD,MAAM,2BAA2BuD,OAAK,EAA/C,SACI,cAAC,KAAD,CACItJ,MAAO,CACHa,MAAO,QACP0I,WAAY,UACZC,QAAS,GACTC,aAAc,YAMxBC,GAAe,SAACjF,GAAD,OACjB,cAAC4E,GAAA,EAAD,CAAStD,MAAOtB,EAAMqB,QAASwD,OAAK,EAApC,SACI,cAAC,KAAD,CACItJ,MAAO,CACHa,MAAO,QACP0I,WAAY,UACZC,QAAS,GACTC,aAAc,YAMf,SAASE,GAAT,GAGI,IAFfC,EAEc,EAFdA,iBACAC,EACc,EADdA,oBAEA,EAA0BC,mBAAc,MAAxC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,qBAAhC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAsBJ,mBAAiB,IAAvC,mBAAOK,EAAP,KAAYC,EAAZ,KACA,EAAwBN,mBAAS,GAAjC,mBAAOZ,EAAP,KAAamB,EAAb,KACA,EAAgCP,oBAAS,GAAzC,mBAAOQ,EAAP,KAAiBC,EAAjB,KACA,EAAgCT,oBAAS,GAAzC,mBAAOU,EAAP,KAAiBC,EAAjB,KACA,EAA0CX,oBAAS,GAAnD,mBAAOY,EAAP,KAAsBC,EAAtB,KACA,EAAsCb,mBAAwB,MAA9D,mBAAOc,EAAP,KAAoBC,EAApB,KAEAC,qBAAU,WACN,IAAIC,EAAgB,KASpB,OAPIT,IAAaE,GAAYI,EACzBG,EAAWC,aAAY,WACnBX,IAAS,IAAIY,MAAOC,UAAYN,GAAe,OAChD,KAEHO,cAAcJ,GAEX,WACHI,cAAcJ,MAEnB,CAACT,EAAUE,EAAUI,IAExB,IAAMQ,EAAmB,WACrBb,GAAY,GACZE,GAAY,GACZI,GAAe,IAAII,MAAOC,WAC1Bb,EAAQ,IAONgB,EAAY,uCAAG,WAAOpB,GAAP,eAAAqB,EAAA,yDACZrB,EADY,wDAEjBG,EAAOH,EAASsB,SAFC,SAGAtB,EAASuB,UAHT,OAGbjE,EAHa,OAIjBqC,EAAiBrC,GACjBoD,GAAiB,GARjBJ,GAAY,GAURR,EAAM0B,aAEN1B,EAAM0B,YAAYxF,SAAQ,SAACyF,GAAD,OAAgBA,EAAMC,UAEpD3B,EAAS,MAXQ,4CAAH,sDApCJ,SAkDC4B,IAlDD,2EAkDd,gCAAAN,EAAA,6DACUO,EAAc,CAAE9B,OAAO,EAAM+B,OAAO,GAD9C,kBAI2BC,UAAUC,aAAaC,aAAaJ,GAJ/D,OAIY7D,EAJZ,OAKQgC,EAAShC,GACLkE,EAAM,IAAIC,KAAUnE,EAAQhB,IAChCoE,IAGY,IACZc,EAAIE,qBADQ,KACoB,WAC5BvC,EAAoBV,IACpB+C,EAAIG,eAAc,WACdhB,EAAaa,SAIrBA,EAAII,iBACJpC,EAAYgC,GAnBpB,kDAqBY,gBAAeK,eAEE,kBAAb,KAAInJ,MACS,yBAAb,KAAIA,KAGJyG,EACI,0BACA,2FAGS,qBAAb,KAAIzG,MACS,oBAAb,KAAIA,KAGJyG,EACI,qCACA,qHAGS,yBAAb,KAAIzG,MACS,gCAAb,KAAIA,MAQS,oBAAb,KAAIA,MACS,0BAAb,KAAIA,KANJyG,EACI,4CACA,mFAaJA,EACI,0DACA,kDA9DpB,2DAlDc,sBAuHd,IAAM2C,EAAS,uCAAG,sBAAAlB,EAAA,0DACVvB,EADU,mBAELE,EAFK,iDAGVA,EAASoC,eAAc,WACnBhB,EAAapB,MAJP,sCAOJ2B,IAPI,OAQVjB,GAAiB,GARP,2CAAH,qDAYf,OACI,eAAC5J,EAAA,EAAD,CACIpB,GAAI,CACAoD,QAAS,OACT+D,eAAgB,SAChB2F,SAAU,CAAEnL,GAAI,OAAQoF,GAAI,WAJpC,UAOI,cAACgG,EAAA,EAAD,CAAQjN,QAAS,kBAAM+M,KAAvB,SACKzC,EACG,cAAC,GAAD,IAEA,cAAC,GAAD,CACIjE,QACIqE,EACM,iCACA,sBAKrBO,GACG,uBACI1K,MAAO,CACH8D,MAAO,OACPlE,SAAU,KAEd4B,IAAK2I,EACLwC,UAAQ,IAGf5C,GAAS,cAACzB,GAAD,CAAOY,KAAMA,OCxLnC,ICVY0D,GDUNC,GACQ,WAODC,GAAiC,CAC1C,CACIrK,SAAU,oBACVF,QAAS,CACLsK,GAVG,QACA,QACA,QACE,eAaT3G,KAAM,QACNR,IAAK,MACLE,aAAc,CACVC,UAAWgH,GACX9G,MAAO,2DACPD,QACI,gHAGZ,CACIrD,SAAU,uBACVF,QAAS,CACL,MACA,QACA,aACA,QACA,0BAEJ2D,KAAM,QACNR,IAAK,UAET,CACIjD,SAAU,8CACViD,IAAK,gBACLnD,QAAS,CAAC,IACV2D,KAAM,QAEV,CACIzD,SAAU,iDACViD,IAAK,kBACLnD,QAAS,CAAC,IACV2D,KAAM,QAEV,CACIzD,SAAU,qCACViD,IAAK,aACLnD,QAAS,CAAC,IACV2D,KAAM,SE/ED6G,GAAc,CACvB,CACIhH,MAAO,eACPvG,KAAM,koBAEV,CACIuG,MAAO,gDACPvG,KAAM,ubAEV,CACIuG,MAAO,aACPvG,KAAM,knBAEV,CACIuG,MAAO,iBACPvG,KAAM,ytBAEV,CACIuG,MAAO,oBACPvG,KAAM,sqBAEV,CACIuG,MAAO,WACPvG,KAAM,kUAEV,CACIuG,MAAO,eACPvG,KAAM,+EAEV,CACIuG,MAAO,kBACPvG,KAAM,8gBAEV,CACIuG,MAAO,mCACPvG,KAAM,2sBAEV,CACIuG,MAAO,sBACPvG,KAAM,gFAEV,CACIuG,MAAO,yBACPvG,KAAM,qNAEV,CACIA,KAAM,+VC7BDwN,GAAc,SAAC,GAMH,IALrBC,EAKoB,EALpBA,uBAEAC,GAGoB,EAJpBC,0BAIoB,EAHpBD,0BACAE,EAEoB,EAFpBA,4BACApI,EACoB,EADpBA,UAEA,OACI,eAACjE,EAAA,EAAD,WACI,cAACN,EAAA,EAAD,CACIE,QAAQ,KACRhB,GAAI,CAAEuC,WAAY,OAAQN,aAAc,GAF5C,sCAMA,cAACnB,EAAA,EAAD,CAAYE,QAAQ,QAAQhB,GAAI,CAAEiC,aAAc,GAAhD,4RAMA,cAACnB,EAAA,EAAD,CAAYd,GAAI,CAAEiC,aAAc,GAAhC,SACI,4GAKHmL,GAAY1J,KAAI,SAACgK,EAAMC,GACpB,OACI,eAACvM,EAAA,EAAD,WACI,cAACN,EAAA,EAAD,CAEIE,QAAQ,KACRhB,GAAI,CAAEuC,WAAY,OAAQN,aAAc,GAH5C,SAKKyL,EAAKtH,OALV,gBACkBuH,IAMlB,cAAC7M,EAAA,EAAD,CACIE,QAAQ,QACRhB,GAAI,CAAEiC,aAAc,GAFxB,SAKKyL,EAAK7N,MALV,eAGiB8N,MAXLA,MAmBxB,eAACvM,EAAA,EAAD,WACI,cAACyC,EAAA,EAAD,CACIC,QACI,cAACS,EAAA,EAAD,CACIlB,SAAU,SAACC,GACP+B,GAAU,SAACuI,GACP,OAAO,2BACAA,GADP,IAEIC,kBAAmBvK,EAAEC,OAAOiB,aAGpCiJ,EAA4BnK,EAAEC,OAAOiB,UAEzCA,QAAS+I,IAGjBvJ,MAAM,6CAGRsJ,IAA2BC,GACzB,cAACzM,EAAA,EAAD,CACIE,QAAQ,QACRhB,GAAI,CACAuC,WAAY,OACZN,aAAc,EACdf,MAAO,OALf,0GCxDP4M,GAAiB,SAAC1I,GAC3B,OAAO,eACAA,I,sEHjBC6H,O,qBAAAA,I,mBAAAA,I,qBAAAA,I,oBAAAA,Q,KAeL,IAAMc,GAAc,SAAC,GAMH,IALrBC,EAKoB,EALpBA,KACAC,EAIoB,EAJpBA,QACAC,EAGoB,EAHpBA,kBACAC,EAEoB,EAFpBA,UACAC,EACoB,EADpBA,YAEMC,EAAiBF,IAAclB,GAAWqB,QAC1CC,EAAmBJ,IAAclB,GAAWuB,OAElD,EAA0CrE,oBAAS,GAAnD,mBAAOsE,EAAP,KAAsBC,EAAtB,KA+DA,OACI,eAACC,GAAA,EAAD,CACIX,KAAMA,EACNY,QATW,WAEXT,IAAclB,GAAWqB,SAC7BL,GAAQ,IAOJ,kBAAgB,qBAChB,mBAAiB,2BAJrB,UAMI,eAACY,GAAA,EAAD,CAAalK,GAAG,qBAAhB,cAvDM,WACV,OAAQwJ,GACJ,KAAKlB,GAAW6B,QACZ,MAAO,yCACX,KAAK7B,GAAW8B,OACZ,MAAO,mCACX,KAAK9B,GAAWuB,OACZ,MAAO,8CACX,KAAKvB,GAAWqB,QACZ,MAAO,yCACX,QACI,MAAO,IA4C4BlI,GAAvC,OACA,cAAC4I,GAAA,EAAD,CAAehP,GAAI,CAAEoD,QAAS,OAAQ+D,eAAgB,UAAtD,SACKkH,EACG,cAACY,GAAA,EAAD,IAEA,eAACC,GAAA,EAAD,eAzEA,WACZ,OAAQf,GACJ,KAAKlB,GAAW6B,QACZ,MAAO,GACX,KAAK7B,GAAW8B,OACZ,MAAO,0EACX,KAAK9B,GAAWuB,OACZ,MAAO,+IACX,QACI,MAAO,IAgEkBW,GAArB,SAGR,eAACC,GAAA,EAAD,CAAepP,GAAI,CAAE6J,QAAS,GAA9B,UACK0E,GACG,cAACxB,EAAA,EAAD,CACI/M,GAAI,CAAEkB,MAAO,eAAgBmO,YAAa,GAC1CvP,QAAS,kBAAMmO,GAAQ,IAF3B,qBAOFI,GACE,cAACtB,EAAA,EAAD,CACI/L,QAAQ,YACRlB,QAAS,kBA/CX,WACd,OAAQqO,GACJ,KAAKlB,GAAW6B,QACZ,OAAOV,IACX,KAAKnB,GAAW8B,OACZ,OAAOb,EAAkBQ,GAC7B,KAAKzB,GAAWuB,OAEZ,OADAE,GAAiB,GACVR,EAAkBQ,GAC7B,QACI,QAqCuBY,IACfpL,WAAS,EACTqL,SAAUd,EAJd,SA1DG,WACf,OAAQN,GACJ,KAAKlB,GAAW6B,QACZ,MAAO,QACX,KAAK7B,GAAW8B,OACZ,MAAO,YACX,KAAK9B,GAAWuB,OACZ,MAAO,SACX,QACI,MAAO,IAuDEgB,Y,qBIrHZC,GAAe,SAAC,GAOH,IANtBzB,EAMqB,EANrBA,KACAC,EAKqB,EALrBA,QACA9H,EAIqB,EAJrBA,QACAC,EAGqB,EAHrBA,MACAsJ,EAEqB,EAFrBA,IACAC,EACqB,EADrBA,YAEA,OACI,eAAChB,GAAA,EAAD,CACIX,KAAMA,EACNY,QAAS,kBAAMX,GAAQ,IACvB,kBAAgB,qBAChB,mBAAiB,2BAJrB,UAMI,eAACY,GAAA,EAAD,CACI7O,GAAI,CACAoD,QAAS,OACT+D,eAAgB,WAChB3F,WAAY,UAJpB,UAOK4E,GACG,cAAChF,EAAA,EAAD,CAAWpB,GAAI,CAAEoH,UAAW,UAA5B,SACI,cAACtG,EAAA,EAAD,CAAYd,GAAI,CAAEuC,WAAY,QAA9B,SACK6D,MAIb,cAACwJ,EAAA,EAAD,CAAY9P,QAAS,kBAAMmO,GAAQ,IAAnC,SACI,cAAC,KAAD,SAGR,cAACe,GAAA,EAAD,UAAgB7I,IAChB,cAACiJ,GAAA,EAAD,CAAepP,GAAI,CAAE6J,QAAS,EAAG1C,eAAgB,UAAjD,SACKuI,GAAOC,GACJ,cAAC5C,EAAA,EAAD,CAAQ/L,QAAQ,YAAYlB,QAAS4P,EAArC,SACKC,U,oBCvClB,SAAeE,GAAtB,qC,8CAAO,WAAsBjI,EAAYkI,GAAlC,6BAAAnE,EAAA,4LAEChH,EAAaoL,MACbC,EAHD,qBAG0BrL,GACd,YACfmL,EAAQ,QAAcE,EALnB,kBAS6BC,KAAMC,KATnC,gIAS6C,CACxCF,SAAUA,EACVG,SAPO,YAQPL,SAAUA,IAZf,OAyBC,IAAS/J,KAhBHqK,EATP,OAcKC,EAAoBD,EAASE,KAC7BC,EAASF,EAAkBE,OAE3B3N,EAAU,CACV4N,QAAS,CACL,eAAgB,wBAKpBC,EAAe,IAAIC,SACPH,EACZE,EAAaE,OAAO5K,EAAKwK,EAAOxK,IA1BrC,OA6BC0K,EAAaE,OAAO,OAAQ/I,EAAMoI,GA7BnC,UA8BOC,KAAMC,KAAKG,EAAkB7F,IAAKiG,EAAc7N,GA9BvD,iCAgCQoN,GAhCR,wCAkCO,IAAIY,MAAJ,yCAlCP,2D,sBAsCA,SAAeC,GAAtB,mC,8CAAO,WAA4BP,GAA5B,eAAA3E,EAAA,yDACEmF,IADF,sBACa,IAAIF,MAAJ,yBADb,gCAGwBX,KAAMC,KAAK,oIAAqII,EAAM,CACzKE,QAAS,CACL,eAAgB,sBALzB,UASyB,OANlBJ,EAHP,QAScW,OATd,sBAUW,IAAIH,MAAMR,EAASY,YAV9B,+DAaO,IAAIJ,MAAJ,6CAbP,2D,sBAiBA,SAAeK,GAAtB,mC,8CAAO,WAA2BC,GAA3B,mBAAAvF,EAAA,yDACGmF,EAAMK,mIAAYC,uBADrB,sBAEa,IAAIR,MAAJ,iCAFb,gCAKwBX,KAAMoB,IAASP,EAAK,CACvC5L,OAAQ,CACJgM,QAASA,KAPlB,UAYyB,OAPlBd,EALP,QAYcW,OAZd,sBAaW,IAAIH,MAAMR,EAASY,YAb9B,6DAiBKf,KAAMqB,aAAN,MAjBL,oBAkBqC,OAA5B,2CAAOlB,gBAAP,eAAiBW,QAlB1B,0CAkBiD,MAlBjD,cAqBO,IAAIH,MAAJ,6CArBP,2D,sBCjEA,ICFKW,kB,KAAAA,G,+BAAAA,M,mCAAAA,M,aAGOpE,GAAUqE,Q,eAHjBD,M,UAIIpE,GAAUqE,OAAS,G,YAJvBD,M,gBAKUA,GAAUE,UAAY,G,gCCgBtCC,GAAY,CACd,EAAG,gCACH,EAAG,iCACH,EAAG,6BACH,EAAG,6BACH,EAAG,+BACH,EAAG,yBACH,EAAG,mCACH,EAAG,mCACH,EAAG,8BACH,GAAI,+BACJ,GAAI,sBACJ,GAAI,8BACJ,GAAI,0BACJ,GAAI,0BAGFC,GAAY,CACd,EAAG,UACH,EAAG,QACH,EAAG,MACH,EAAG,OACH,EAAG,UACH,EAAG,WACH,EAAG,WAGDC,GAAiB,CACnB,6GACA,2FACA,yEACA,4EACA,wEACA,uCACA,8DACA,0DACA,+DACA,gEACA,6CACA,4EACA,iFACA,iFACA,8DACA,oHACA,yHACA,yHACA,uGASJ,SAASC,GAAsB5I,EAAa6I,GAGxC,OAFA7I,EAAMF,KAAKgJ,KAAK9I,GAChB6I,EAAM/I,KAAKC,MAAM8I,GACV/I,KAAKC,MAAMD,KAAKiJ,UAAYF,EAAM7I,EAAM,GAAKA,GAGjD,IAAMgJ,GAAS,SAACnN,GACnB,MAAwBqF,oBAAU,GAAlC,mBAAO+H,EAAP,KAAaC,EAAb,KAEIC,EAEAtN,EAFAsN,gBACAC,EACAvN,EADAuN,mBAEJ,EAA6BlI,mBL7ES,SACtCiI,GAEA,MAAO,CACHE,OAAQF,EACRG,IAAK,KACLC,OAAQ,KACRC,cAAe,KACfC,gBAAiB,KACjBC,WAAY,KACZC,gBAAiB,KACjB/E,kBAAmB,MKmEnBgF,CAA2BT,IAD/B,mBAAOhN,EAAP,KAAgBC,EAAhB,KAGA,EAAuDyN,aAAW,CAAC,SAAnE,mBAAOC,EAAP,KAAoBC,EAApB,KAAmCC,EAAnC,KACA,EAAuDH,aAAW,CAAC,WAAnE,mBAAOI,EAAP,KAAoBC,EAApB,KAAmCC,EAAnC,KACA,EAA8BjJ,oBAAS,GAAvC,mBAAOkJ,EAAP,KAAgBC,EAAhB,KAEAnI,qBAAU,gBACuBoI,IAA1BL,EAAW,aAAoDK,IAAxBR,EAAW,OACnDO,GAAW,GACXH,EAAc,SAAUf,EAAiB,CAACoB,KAAM,MAChDR,EAAc,OAAQ,EAAG,CAACQ,KAAM,MAChCrB,EAAQ,MAET,IAKL,MAAwDhI,oBAAS,GAAjE,mBAAOsJ,EAAP,KAA6BC,EAA7B,KACA,EAAgDvJ,oBAAS,GAAzD,mBAAOwJ,EAAP,KAAyBC,EAAzB,KAOA,EAAwCzJ,mBAAuB,CAC3D/D,MAAO,GACPD,QAAS,KAFb,mBAAO0N,EAAP,KAAqBC,EAArB,KAIA,EAAkC3J,mBAAS8C,GAAWuB,QAAtD,mBAAOL,EAAP,KAAkB4F,GAAlB,KACA,GAA0C5J,qBAA1C,qBAAO6J,GAAP,MAAsB/J,GAAtB,MACA,GAA8BE,qBAA9B,qBAAO8J,GAAP,MAAgBC,GAAhB,MACA,GAAgC/J,oBAAkB,GAAlD,qBAAOgK,GAAP,MAAiBC,GAAjB,MACA,GAAsDjK,mBAAiB,GAAvE,qBAAOkK,GAAP,MAA4BC,GAA5B,MACA,GAA4DnK,oBAAkB,GAA9E,qBAAOmD,GAAP,MAA+BE,GAA/B,MACA,GAAgErD,oBAAkB,GAAlF,qBAAOoD,GAAP,MAAiCE,GAAjC,MACA,GAAwDtD,mBAAmC,IAA3F,qBAAOoK,GAAP,MAA6BC,GAA7B,MAGMC,GAAqB/O,uBAAY,SAACgP,GACpCrP,EAAUqP,KACX,IAEGxK,GAAsB,SACxB/D,EACAC,EACAsJ,EACAC,GAEAmE,EAAgB,CACZ1N,MAAOA,GAAS,GAChBD,UACAuJ,IAAKA,EACLC,YAAaA,IAEjBiE,GAAoB,IAQlBe,GAAc,uCAAG,4BAAAhJ,EAAA,0DACfiJ,GADe,uBAEflB,GAAwB,GAFT,6BAKVxB,IAASX,GAAUE,UALT,uBAMLoD,EAAa/G,GAAe1I,GANvB,SAOLyL,GAAagE,GAPR,QASL,IAAV3C,GACAc,EAAc,OAAQd,EAAO,EAAG,CAACsB,KAAM,MACvCrB,EAAQD,EAAO,IACRA,EAAO4C,IACd9B,EAAc,OAAQd,EAAO,EAAG,CAACsB,KAAM,MACvCrB,EAAQD,EAAO,IACRA,IAAS4C,GAAU,IAC1B9B,EAAc,OAAQ+B,GAAMvD,OAAO,EAAG,CAACgC,KAAM,MAC7CrB,EAAQ4C,GAAMvD,OAAO,IAjBN,4CAAH,qDAqBdwD,GAAiBC,mBAAQ,kBAAMrD,GAAelO,KAAI,SAAC+C,EAAeyO,GAEpE,IAAMxO,EAASgL,GAAUG,GAAsB,EAAGsD,OAAOC,KAAK1D,IAAWF,SAEnE7K,EAASgL,GAAUE,GAAsB,EAAGsD,OAAOC,KAAKzD,IAAWH,SASzE,OARAgD,IAAwB,SAAAa,GAAwB,4BACzCA,GADyC,CAE5C,CACIC,cAAe7O,EACfE,SACAD,eAIJ,cAAC,EAAD,CACID,cAAeA,EACfC,OAAQA,EACRC,OAAQA,SAGhB,IAuBE4O,GAAyB,CAC3B,cAAC,GAAD,CACEjI,uBAAwBA,GACxBE,0BAA2BA,GAC3BD,yBAA0BA,GAC1BE,4BAA6BA,GAC7BpI,UAAWA,KANc,mBAQxB8H,GAAUzJ,KAAI,SAACZ,EAAU6K,GAAX,OACb,cAAC,EAAD,CACIrI,aAAc4E,GAEdpH,SAAUA,EACVsC,QAASA,EACTC,UAAWoP,IAHN9G,OAXc,CAiB3B,cAAC,EAAD,MAGE6H,GAA2B,CAC7B,cAAC,EAAD,KAGET,GAAK,sBACJQ,IADI,YAEJP,IACAQ,IAGDV,GAAYC,GAAMvD,OAAS,EAE3BoD,GACF1C,IAASX,GAAUkE,iBAClBvD,EAAOX,GAAUkE,iBAAmBvD,EAAQ4C,GAE3CY,GAAY,uCAAG,WAAOhH,GAAP,uBAAA/C,EAAA,yDACZqI,GADY,uBAEbtF,GAAiB,GAFJ,4CAUT6F,GAAqBrC,EAAOqD,GAA0B/D,QAHtD8D,EAPS,EAOTA,cACA3O,EARS,EAQTA,OACAD,EATS,EASTA,OATS,SAWQmJ,GAAOmE,GAAe,CACvC1B,OAAQF,EACRkD,gBACA3O,SACAD,WAfS,OAWPiP,EAXO,OAmBTzD,IAASX,GAAUkE,iBACnBvB,GAAWyB,GAEf5B,GAAa9G,GAAW6B,SACxB7E,QAAiBsJ,GACjB7E,GAAiB,GAxBJ,kDA0BbkH,QAAQC,IAAR,MACA9B,GAAa9G,GAAW8B,QACxBL,GAAiB,GA5BJ,QAkCjBA,GAAiB,GAlCA,0DAAH,sDAqClBvD,qBAAU,WACFyJ,KAAoBnB,GACpBM,GAAa9G,GAAWuB,UAE7B,CAACoG,GAAiBnB,KFpSE,SAACqC,EAAUC,EAAOC,GACzC,IAAMC,EAAgBC,mBAEtB/K,qBAAU,WACF6K,IACAC,EAAcE,QAAUL,KAE7B,CAACA,EAAUE,IAEd7K,qBAAU,WAKN,GAAI6K,GACc,OAAVD,EAAgB,CAChB,IAAMpR,EAAK0G,aANnB,WACI4K,EAAcE,YAKmBJ,GAC7B,OAAO,WACHvK,cAAc7G,OAI3B,CAACmR,EAAUC,EAAOC,IEiRrBI,CAAW,sBACP,sBAAAzK,EAAA,0DAEQsI,GAFR,gCAG+BhD,GAAYgD,IAH3C,eAKYG,IAAY,GAGZC,IAAuB,GACvBD,IAAY,GAGhBE,GAAuBD,GAAsB,GAZrD,2CAFiB,IAkBjBF,IAKJhJ,qBAAU,WAAM,4CACZ,WAAyBxG,GAAzB,eAAAgH,EAAA,sEAC2BsF,GAAYtM,GADvC,cACUyL,EADV,SAGQgE,IAAY,GAHpB,kBAKWhE,GALX,4CADY,sBAQRwE,IAAmBX,IARV,SAAD,2BASRoC,CAAUpC,MAEf,CAACA,GAASW,KAEb,IA2BM0B,IACQ,IAAVpE,GACY,IAATA,GACAA,GAAQX,GAAUkE,gBAEnBc,IACQ,IAAVrE,GAAeA,IAAS4C,GAe5B,OACI,mCACI,eAAC0B,EAAA,EAAD,CACIxW,GAAI,CACAoD,QAAS,OACT8D,KAAM,EACNpB,cAAe,SACf+D,QAAS,GALjB,WASSwJ,GAEG,gCACI,4EACA,cAACtG,EAAA,EAAD,CAAQjN,QA/LF,WAC1BwT,GAAW,GACRmD,SAAS1D,EAAYb,KAAM,KAAO/E,GAAUqE,OAAS,GACtDW,EAAQsE,SAAS1D,EAAYb,KAAM,KACnCG,EAAmBa,EAAYZ,UAE7BW,EAAiB,QACjBG,EAAiB,UACjBjB,EAAQ,GACRgB,EAAc,SAAUf,EAAiB,CAACoB,KAAM,QAsLhC,iBACA,cAACzG,EAAA,EAAD,CAAQjN,QAxMK,WACjCmT,EAAiB,QACjBG,EAAiB,UACjBjB,EAAQ,GACRgB,EAAc,SAAUf,EAAiB,CAACoB,KAAM,MAChDF,GAAW,IAmMS,mBAIZ,cAAClS,EAAA,EAAD,CAAWpB,GAAI,CAAEkH,KAAM,GAAvB,SAA6B6N,GAAM7C,KACnC,eAACtO,EAAA,EAAD,CACI5D,GAAI,CACAmH,eAAgB,gBAChB/D,QAAS,OACT0J,SAAU,CAAEnL,GAAI,OAAQoF,GAAI,WAJpC,UAOKuP,IACG,cAACvJ,EAAA,EAAD,CACI/L,QAAQ,YACRX,MAAO,CACHC,gBAAiB,WAErBN,GAAI,CACA0W,MAAO,CAAE/U,GAAI,EAAGoF,GAAI,GACpB5C,MAAO,GACP3D,OAAQ,GACR0B,UAAW,CAAEP,GAAI,EAAGoF,GAAI,IAE5BjH,QAhRD,WACfoS,EAAO,GAAGC,EAAQD,EAAO,GAC7Bc,EAAc,OAAQd,EAAO,EAAG,CAACsB,KAAM,OAmQvB,kBA1CF,WAEd,GAAItB,GAAQX,GAAUkE,iBAAmBvD,IAAS4C,GAC9C,OACI,cAAC9K,GAAD,CAEIC,iBAAkBA,GAClBC,oBAAqBA,IAFhBgI,GAqDJyE,GACAJ,IACG,cAACxJ,EAAA,EAAD,CACI/L,QAAQ,YACRX,MAAO,CACHC,gBAAiB,WAErBR,QAAS6U,GACTpF,WA7FhB2C,IAASX,GAAUqF,aACZ,EAGP1E,GAAQX,GAAUsF,cAClB3E,GAAQX,GAAUuF,eCxVS,SACnC1R,EACA2R,GAOA,IAHgB,OAAZA,QAAY,IAAZA,OAAA,EAAAA,EAAc9Q,eACd8Q,EAAa9Q,aAAaC,YACtBd,EAAQ2R,EAAahR,KACN,OAAO,EAG9B,IAAMiR,EAAyC,OAC3CD,QAD2C,IAC3CA,OAD2C,EAC3CA,EAAcC,kBACZC,IACA7R,EAAQ2R,EAAahR,KAC3B,IAAKiR,EAAmB,OAAOC,EAI/B,IAAMC,EAA+BF,EAAkBG,OACnD,SAACrU,GACG,IAAMsU,IACAhS,EAAQtC,EAASiD,KACvB,OAA2B,OAAvBjD,EAASoD,UACFkR,IAGHhS,EAAQtC,EAASoD,UAAUH,OAC3BjD,EAASoD,UAAUwO,SAGZ0C,KAQvB,OAAOH,GAA0BC,EDkTlBG,CACHjS,EACA+H,GAAU+E,EAAOX,GAAUuF,kBAG/BlC,IACSZ,IAiFOhU,GAAI,CACA0W,MAAO,CAAE/U,GAAI,EAAGoF,GAAI,GACpB5C,MAAO,GACP3D,OAAQ,GACR0B,UAAW,CAAEP,GAAI,EAAGoF,GAAI,GACxBuQ,WAAY,CAAE3V,GAAI,SAZ1B,qBAmBR,cAAC,GAAD,CACIqM,KAAMyF,EACNxF,QAASyF,EACTxF,kBAAmB,SAACQ,GAAD,OAAgCgH,GAAahH,IAChEP,UAAWA,EACXC,YAvHG,WACfsF,GAAwB,GACxBvB,EAAQD,EAAO,GACfc,EAAc,OAAQd,EAAO,EAAG,CAACsB,KAAM,MACvCO,GAAa9G,GAAWuB,WAqHhB,cAAC,GAAD,CACIR,KAAM2F,EACN1F,QAAS2F,EACTzN,QAAS0N,EAAa1N,QACtBC,MAAOyN,EAAazN,MACpBsJ,IAAG,OAAEmE,QAAF,IAAEA,OAAF,EAAEA,EAAcnE,IACnBC,YAAW,OAAEkE,QAAF,IAAEA,OAAF,EAAEA,EAAclE,oB,UE9blC4H,GAAeC,aAAY,CACpCC,QAAS,CACLC,QAAS,CACLC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,QAElBC,QAAS,CACLJ,MAAO,UACPC,KAAM,UACNC,KAAM,YAGdG,WAAY,CACRC,eAAgB,CACZC,eAAgB,CACZC,KAAM,CACF7X,gBAAiB,UACjB,UAAW,CACPA,gBAAiB,WAErB,gBAAiB,CACbA,gBAAiB,cAKjC8X,cAAe,CACXF,eAAgB,CACZC,KAAM,CACF,gBAAiB,CACbjX,MAAO,iBC3ClB0E,GAAa,CACtBC,WAAY,IACZwS,cAAe,gBACfC,YAAa,eAGJC,GAAS,CAClB,CACI/E,KAAM5N,GAAWC,WACjBnF,UrB+CO,WACX,IAAI6E,EAAUC,cACRgT,EAAc9S,uBAChB,SAAC+S,GACGlT,EAAQI,KAAK8S,KAEjB,CAAClT,IAGCmT,EAAe,CACjB,CACI9Y,OAAQ,qBACRC,KAAM,yDACN8Y,QAAS,kBAAMH,EAAY5S,GAAWyS,kBAI9C,OACI,eAACjX,EAAA,EAAD,CACIpB,GAAI,CAAEoD,QAAS,OAAQ0J,SAAU,OAAQ3F,eAAgB,UAD7D,UAGI,cAAC,EAAD,IACCuR,EAAahV,KAAI,SAACkV,EAAUjL,GACzB,OACI,cAAClO,EAAD,CAEIG,OAAQgZ,EAAShZ,OACjBC,KAAM+Y,EAAS/Y,KACfC,QAAS,WACL8Y,EAASD,YAJRhL,WqBtEzB,CACI6F,KAAM5N,GAAWyS,cACjB3X,UCXqB,WACzB,MAA8CyJ,mBAAS,QAAD,OAAS4F,QAA/D,mBAAOqC,EAAP,KAAwBC,EAAxB,KACA,OACI,cAACwG,EAAA,EAAD,CAAeC,MAAOvB,GAAtB,SACI,cAAC,GAAD,CACInF,gBAAiBA,EACjBC,mBAAoBA,QDOhC,CACImB,KAAM5N,GAAW0S,YACjB5X,UEnBkB,WACxB,OACE,eAACU,EAAA,EAAD,WACE,cAACN,EAAA,EAAD,CACEE,QAAQ,KACRhB,GAAI,CAAEuC,WAAY,OAAQN,aAAc,GAF1C,6BAMA,cAACnB,EAAA,EAAD,CACEE,QAAQ,QACRhB,GAAI,CAAEiC,aAAc,GAFtB,sKAMA,cAACnB,EAAA,EAAD,uCAGA,+BACE,oHACA,8HACA,sKAEF,eAACA,EAAA,EAAD,CACEE,QAAQ,QACRhB,GAAI,CAAEiC,aAAc,GAFtB,+CAKI,cAACE,EAAA,EAAD,CAAMC,KAAK,2BAA2BC,UAAU,OAAhD,4BAIJ,cAACvB,EAAA,EAAD,CACEE,QAAQ,KACRhB,GAAI,CAAEuC,WAAY,OAAQN,aAAc,GAF1C,0BAMA,cAACnB,EAAA,EAAD,CACEE,QAAQ,KACRhB,GAAI,CAAEuC,WAAY,OAAQN,aAAc,GAF1C,8BAMA,cAACnB,EAAA,EAAD,CAAYE,QAAQ,QAAQhB,GAAI,CAAEiC,aAAc,GAAhD,wZAMA,cAACnB,EAAA,EAAD,CACIE,QAAQ,KACRhB,GAAI,CAAEuC,WAAY,OAAQN,aAAc,GAF5C,6BAMA,cAACnB,EAAA,EAAD,CAAYE,QAAQ,QAAQhB,GAAI,CAAEiC,aAAc,GAAhD,qOC3CA8S,GAAQ,CACV,CAAEtR,KAAM,kBAAmBgV,MAAO7S,GAAWC,YAC7C,CAAEpC,KAAM,cAAegV,MAAO7S,GAAW0S,cAwH9BS,GArHA,WACX,MAAsC5O,mBAAS,MAA/C,mBAAO6O,EAAP,KAAoBC,EAApB,KACI1T,EAAUC,cAUR0T,EAAmBxT,uBACrB,SAAC+S,GACGQ,EAAe,MACf1T,EAAQI,KAAK8S,KAEjB,CAAClT,IAGCiT,EAAc9S,uBAChB,kBAAMH,EAAQI,KAAKC,GAAWC,cAC9B,CAACN,IAGL,OACI,cAAC4T,EAAA,EAAD,CAAQC,SAAS,SAASpZ,GAAI,CAAEM,gBAAiB,WAAjD,SACI,cAACc,EAAA,EAAD,CAAWnB,SAAS,KAApB,SACI,eAACoZ,EAAA,EAAD,CAASC,gBAAc,EAAvB,UACI,cAACxY,EAAA,EAAD,CACIE,QAAQ,KACRuY,QAAM,EACN7Y,UAAU,MACVV,GAAI,CAAEwZ,GAAI,EAAGpW,QAAS,CAAEzB,GAAI,OAAQC,GAAI,WAE5C,eAACgC,EAAA,EAAD,CACI5D,GAAI,CACAyZ,SAAU,EACVrW,QAAS,CAAEzB,GAAI,OAAQC,GAAI,SAHnC,UAMI,cAACgO,EAAA,EAAD,CACI8J,KAAK,QACL,aAAW,0BACX,gBAAc,cACd,gBAAc,OACd5Z,QA1CE,SAACkF,GACvBiU,EAAejU,EAAM2U,gBA0CDzY,MAAM,UANV,SAQI,cAAC,IAAD,MAEJ,cAAC0Y,EAAA,EAAD,CACIjV,GAAG,cACHkV,SAAUb,EACVc,aAAc,CACVC,SAAU,SACVC,WAAY,QAEhBC,aAAW,EACXC,gBAAiB,CACbH,SAAU,MACVC,WAAY,QAEhBhM,KAAMmM,QAAQnB,GACdpK,QAxDG,WACvBqK,EAAe,OAwDKjZ,GAAI,CACAoD,QAAS,CAAEzB,GAAI,QAASC,GAAI,SAfpC,SAkBKmT,GAAMrR,KAAI,gBAAGD,EAAH,EAAGA,KAAMgV,EAAT,EAASA,MAAT,OACP,cAAC2B,EAAA,EAAD,CAEIta,QAAS,kBAAMoZ,EAAiBT,IAFpC,SAII,cAAC3X,EAAA,EAAD,CAAYsG,UAAU,SAAtB,SACK3D,KAJAA,WAUrB,cAAC3C,EAAA,EAAD,CACIE,QAAQ,KACRuY,QAAM,EACN7Y,UAAU,MACVZ,QAAS0Y,EACTxY,GAAI,CACAyZ,SAAU,EACVY,WAAY,4BACZC,OAAQ,WARhB,wCAaA,cAAC1W,EAAA,EAAD,CACI5D,GAAI,CACAyZ,SAAU,EACVrW,QAAS,CAAEzB,GAAI,OAAQC,GAAI,SAHnC,SAMKmT,GAAMrR,KAAI,gBAAGD,EAAH,EAAGA,KAAMgV,EAAT,EAASA,MAAT,OACP,cAAC1L,EAAA,EAAD,CAEIjN,QAAS,WACLoZ,EAAiBT,IAErBzY,GAAI,CAAEua,GAAI,EAAGrZ,MAAO,QAASkC,QAAS,SAL1C,SAOKK,GANIA,gBCtFtB+W,GA/BH,WACR,OACI,eAAC,IAAD,WACI,cAAC,GAAD,IACA,cAACpZ,EAAA,EAAD,CACIpB,GAAI,CACA6J,QAAS,CAAElI,GAAI,EAAGC,GAAI,GACtBzB,UAAW,OACXgE,MAAO,QACPf,QAAS,OACT0C,cAAe,UAEnB8C,UAAU,MARd,SAUI,cAAC,IAAD,UACK2P,GAAO7U,KAAI,YAA0B,IAAvB8P,EAAsB,EAAtBA,KAAM9S,EAAgB,EAAhBA,UACjB,OACI,cAAC,IAAD,CACI+Z,OAAK,EAELjH,KAAMA,EACN9S,UAAWA,GAFN8S,cCRtBkH,GAdS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBC,MACjB,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,UCHxBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAACC,GAAA,EAAD,UACE,cAAC,GAAD,QAGNC,SAASC,eAAe,SAM5Bd,M","file":"static/js/main.fcd9f12a.chunk.js","sourcesContent":["import Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport Typography from '@mui/material/Typography';\r\nimport { CardActionArea } from '@mui/material';\r\n\r\ninterface ActionCardProps {\r\n    imageUrl?: string;\r\n    imageAlt?: string;\r\n    header: string;\r\n    body: string;\r\n    onClick: () => void;\r\n}\r\n\r\nexport default function ActionCard({\r\n    imageUrl,\r\n    imageAlt,\r\n    header,\r\n    body,\r\n    onClick,\r\n}: ActionCardProps) {\r\n    return (\r\n        <Card \r\n          sx={{ maxWidth: 345, minWidth: 300, minHeight: 200, margin: 1 }}\r\n          style={{backgroundColor: \"#db848f\"}}\r\n        >\r\n            <CardActionArea sx={{ height: '100%' }} onClick={onClick}>\r\n                {imageUrl && (\r\n                    <CardMedia\r\n                        component=\"img\"\r\n                        height=\"140\"\r\n                        image={imageUrl}\r\n                        alt={imageAlt}\r\n                    />\r\n                )}\r\n                <CardContent>\r\n                    <Typography \r\n                      gutterBottom variant=\"h5\" component=\"div\"\r\n                      align=\"center\"\r\n                      color=\"#fff5f6\"\r\n                    >\r\n                        {header}\r\n                    </Typography>\r\n                    <Typography \r\n                      variant=\"body2\" color=\"#ffffff\"\r\n                      align=\"center\"\r\n                    >\r\n                        {body}\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>\r\n        </Card>\r\n    );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/rosie.e82cd17a.png\";","export default __webpack_public_path__ + \"static/media/logo.0a813fae.png\";","import { Container, Grid, Link, Typography } from '@mui/material';\r\nimport ActionCard from '../components/ActionCard.component';\r\nimport { useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { routePaths } from '../routes/routes';\r\nimport rosie from './rosie.png';\r\nimport logo from './logo.png';\r\n\r\nconst WebsiteInfo = () => {\r\n    return (\r\n        <Container>\r\n            <Grid container direction=\"row\" alignItems=\"center\" spacing={0}>\r\n              <Grid item xs={10} md={10}>\r\n                <img\r\n                    src={rosie}\r\n                    alt=\"ROSIE Logo\"\r\n                    style={{\r\n                        maxWidth: '90%',\r\n                        maxHeight: '90%',\r\n                    }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={2} md={2}>\r\n                <img\r\n                    src={logo}\r\n                    alt=\"Haiven Logo\"\r\n                    style={{\r\n                        maxWidth: '90%',\r\n                        maxHeight: '90%',\r\n                    }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                  <Typography variant=\"h5\" sx={{ marginBottom: 1, marginTop: 3}} align=\"center\">\r\n                      Welcome to ROSIE lab's shout data collection site\r\n                  </Typography>\r\n                  <Typography align=\"center\">\r\n                      At ROSIE we build robots that are useful, friendly and fun!\r\n                      We believe that robots can help us automate simple, repetitive\r\n                      tasks while bringing joy to our lives. If you want to\r\n                      know more about ROSIE LAB please see {}\r\n                      <Link href=\"https://www.rosielab.ca/\" underline=\"none\">\r\n                          our website\r\n                      </Link>\r\n                      . We are currently working with Haiven, a non profit organization \r\n                      improving the lives of those living with intimate partner violence,\r\n                      to learn more about Haiven please see {}\r\n                      <Link href=\"/ourPurpose\" underline=\"none\">\r\n                          Our Purpose\r\n                      </Link>\r\n                      . We thank you very much for your support and\r\n                      hope that you will consider donating your voice\r\n                      today!\r\n                  </Typography>\r\n              </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default function Home() {\r\n    let history = useHistory();\r\n    const handleClick = useCallback(\r\n        (route: string) => {\r\n            history.push(route);\r\n        },\r\n        [history]\r\n    );\r\n\r\n    const activityList = [\r\n        {\r\n            header: 'Donate your shouts',\r\n            body: 'Click here to help us better understand shouted speech',\r\n            onclick: () => handleClick(routePaths.DONATE_SHOUTS),\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <Container\r\n            sx={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center' }}\r\n        >\r\n            <WebsiteInfo />\r\n            {activityList.map((activity, index) => {\r\n                return (\r\n                    <ActionCard\r\n                        key={index}\r\n                        header={activity.header}\r\n                        body={activity.body}\r\n                        onClick={() => {\r\n                            activity.onclick();\r\n                        }}\r\n                    />\r\n                );\r\n            })}\r\n        </Container>\r\n    );\r\n}\r\n","import { Container, Typography } from '@mui/material';\r\n\r\nexport const InstructionsPage = () => {\r\n    return (\r\n        <Container>\r\n            <Typography\r\n                variant=\"h4\"\r\n                sx={{ fontWeight: 'bold', marginBottom: 3 }}\r\n            >\r\n                Some information before you begin\r\n            </Typography>\r\n            <Typography variant=\"body1\" sx={{ marginBottom: 1 }}>\r\n                First off please be aware that you will be yelling periodically\r\n                for approximately 30 minutes. Please inform those around you so\r\n                as not to alert, or cause distress to your neighbours and avoid\r\n                any possible punitive actions.\r\n            </Typography>\r\n            <Typography>\r\n                Items to prepare:\r\n                <ul>\r\n                    <li>Pants or jacket with pockets</li>\r\n                    <li>Purse/backpack/bag</li>\r\n                    <li>Something soft, e.g. pillow, blanket, sweater</li>\r\n                </ul>\r\n            </Typography>\r\n            <Typography>\r\n                Understanding the voice levels\r\n                <ol>\r\n                    <li>\r\n                        Speaking : this is a relaxed talking voice up to “raised\r\n                        voice”\r\n                    </li>\r\n                    <li>\r\n                        Shouting : this is raised voice until your voice breaks\r\n                    </li>\r\n                    <li>\r\n                        Screaming : this is the highest level where you feel the\r\n                        breaking in your voice as you go into a scream\r\n                    </li>\r\n                </ol>\r\n            </Typography>\r\n            <Typography>\r\n                You will be completing 19 recordings with three of each voice\r\n                level. For each recording you will be given a random phrase and\r\n                emotion as well as a position for your phone. Hold or place the\r\n                phone in the provided position and do as follows:\r\n                <ul>\r\n                    <li>say \"a\" and speak the phrase</li>\r\n                    <li>say \"b\" and shout the phrase</li>\r\n                    <li>say \"c\" and scream the phrase</li>\r\n                </ul>\r\n                When you have finished, click \"submit\" and move on to the next\r\n                recording\r\n            </Typography>\r\n            <Typography>\r\n                This page uses cookies. If you cannot complete all of the\r\n                recordings at once you may start where you left off, given your\r\n                cookies and cache have not been cleared.\r\n            </Typography>\r\n        </Container>\r\n    );\r\n};\r\n","import { Container, Typography } from '@mui/material';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const ThankYouPage = () => {\r\n    return (\r\n        <Container>\r\n            <Typography\r\n                variant=\"h4\"\r\n                sx={{\r\n                    fontWeight: 'bold',\r\n                    color: 'primary.dark',\r\n                    marginBottom: 3,\r\n                }}\r\n            >\r\n                Thank you very much for submitting your voice!\r\n            </Typography>\r\n            <Typography variant=\"body1\" sx={{ marginBottom: 1 }}>\r\n                Take a screenshot of this page and email hello.haiven@gmail.com\r\n                to receive a participation certificate!\r\n            </Typography>\r\n            <Typography variant=\"body1\" sx={{ marginBottom: 1 }}>\r\n                {'Click '}\r\n                <Link to=\"/\" style={{ color: '#7DBCFF' }}>\r\n                    <span aria-hidden=\"true\"></span>\r\n                    here\r\n                </Link>\r\n                {' to return to the main page or exit to close'}\r\n            </Typography>\r\n        </Container>\r\n    );\r\n};\r\n","import {\r\n    Autocomplete,\r\n    Box,\r\n    Checkbox,\r\n    FormControl,\r\n    FormGroup,\r\n    FormControlLabel,\r\n    Radio,\r\n    RadioGroup,\r\n    TextField,\r\n    Typography,\r\n} from '@mui/material';\r\n\r\ninterface FieldTypeProps {\r\n    answerKey: string;\r\n    options: Array<string>;\r\n    questionType: string;\r\n    question?: string;\r\n    getCurVal: (key: string) => string;\r\n    handleChange: (key: string, value: any, keysToClear: string) => void;\r\n    keysToClear: string; // these are the answer keys that need to be cleared if the answer to this question changes\r\n}\r\n\r\nexport const FieldType = ({\r\n    answerKey,\r\n    options,\r\n    questionType,\r\n    question,\r\n    getCurVal,\r\n    handleChange,\r\n    keysToClear,\r\n}: FieldTypeProps) => {\r\n    switch (questionType) {\r\n        case 'radio': {\r\n            return (\r\n                <FormControl sx={{ marginBottom: 2 }} component=\"fieldset\">\r\n                    <Typography sx={{ fontWeight: 'bold', marginBottom: 1 }}>\r\n                        {question}\r\n                    </Typography>\r\n                    <RadioGroup\r\n                        sx={{ display: 'inline-flex' }}\r\n                        onChange={(e) =>\r\n                            handleChange(answerKey, e.target.value, keysToClear)\r\n                        }\r\n                        value={getCurVal(answerKey)}\r\n                        name=\"radio-buttons-group\"\r\n                    >\r\n                        {options.map((option: any) => {\r\n                            return (\r\n                                <Box key={option} sx={{ marginBottom: 1 }}>\r\n                                    <FormControlLabel\r\n                                        key={option}\r\n                                        value={option}\r\n                                        control={<Radio />}\r\n                                        label={option}\r\n                                    />\r\n                                </Box>\r\n                            );\r\n                        })}\r\n                    </RadioGroup>\r\n                </FormControl>\r\n            );\r\n        }\r\n        case 'text': {\r\n            return (\r\n                <>\r\n                    <Typography sx={{ fontWeight: 'bold', marginBottom: 2 }}>\r\n                        {question}\r\n                    </Typography>\r\n                    <TextField\r\n                        autoFocus\r\n                        label={'Type an answer'}\r\n                        sx={{ width: '25ch' }}\r\n                        value={getCurVal(answerKey) || ''}\r\n                        onChange={(e) =>\r\n                            handleChange(answerKey, e.target.value, keysToClear)\r\n                        }\r\n                        inputProps={{\r\n                            autoComplete: 'off', // disable autocomplete and autofill\r\n                        }}\r\n                    />\r\n                </>\r\n            );\r\n        }\r\n        case 'skipCheckbox': {\r\n            return (\r\n                <FormControl sx={{ marginBottom: 2 }}>\r\n                    {question && (\r\n                        <Typography\r\n                            sx={{ fontWeight: 'bold', marginBottom: 1 }}\r\n                        >\r\n                            {question}\r\n                        </Typography>\r\n                    )}\r\n                    <FormGroup sx={{ display: 'inline-flex' }}>\r\n                        {options.map((option: any) => {\r\n                            return (\r\n                                <Box key={option}>\r\n                                    <FormControlLabel\r\n                                        key={option}\r\n                                        value={option}\r\n                                        label={option}\r\n                                        control={\r\n                                            <Checkbox\r\n                                                checked={\r\n                                                    option ===\r\n                                                    getCurVal(answerKey)\r\n                                                }\r\n                                                onChange={(e) =>\r\n                                                    handleChange(\r\n                                                        answerKey,\r\n                                                        getCurVal(answerKey) ===\r\n                                                            option\r\n                                                            ? null\r\n                                                            : option,\r\n                                                        keysToClear\r\n                                                    )\r\n                                                }\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                </Box>\r\n                            );\r\n                        })}\r\n                    </FormGroup>\r\n                </FormControl>\r\n            );\r\n        }\r\n        case 'searchSelect': {\r\n            return (\r\n                <>\r\n                    <Typography sx={{ fontWeight: 'bold', marginBottom: 1 }}>\r\n                        {question}\r\n                    </Typography>\r\n                    <Autocomplete\r\n                        disablePortal\r\n                        value={getCurVal(answerKey) || null}\r\n                        id=\"combo-box-demo\"\r\n                        options={options}\r\n                        sx={{ maxWidth: 300, marginBottom: 2 }}\r\n                        getOptionLabel={(option: any) => option}\r\n                        renderOption={(props, option: any) => (\r\n                            <Box component=\"li\" {...props}>\r\n                                {option}\r\n                            </Box>\r\n                        )}\r\n                        isOptionEqualToValue={(option, value) =>\r\n                            option === value ||\r\n                            value === 'Prefer not to disclose'\r\n                        }\r\n                        onChange={(event, value) =>\r\n                            handleChange(answerKey, value, keysToClear)\r\n                        }\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                label=\"Select the answer\"\r\n                                inputProps={{\r\n                                    ...params.inputProps,\r\n                                    autoComplete: 'off', // disable autocomplete and autofill\r\n                                }}\r\n                            />\r\n                        )}\r\n                    />\r\n                </>\r\n            );\r\n        }\r\n        default:\r\n            return <></>;\r\n    }\r\n};\r\n","import { Container } from '@mui/material';\r\nimport { useCallback } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { routePaths } from '../../../commons/routes/routes';\r\nimport { FieldType } from '../components/fieldTypes/FieldType.component';\r\n\r\ninterface QuestionsPageProps {\r\n    question: any;\r\n    answers: any;\r\n    setAnswer: (answer: any) => void;\r\n    triggerAlert: (\r\n        message: string,\r\n        title?: string,\r\n        cta?: () => void,\r\n        buttonTitle?: string\r\n    ) => void;\r\n}\r\n\r\nexport const QuestionsPage = ({\r\n    question,\r\n    answers,\r\n    setAnswer,\r\n    triggerAlert,\r\n}: QuestionsPageProps) => {\r\n    let history = useHistory();\r\n\r\n    const goHome = useCallback(() => {\r\n        history.push(routePaths.ACTIVITIES);\r\n    }, [history]);\r\n\r\n    const handleChange = (key: string, value: any, clearIfChange: any) => {\r\n        // check if the question answered requires an alert\r\n        if (\r\n            question?.requireAlert &&\r\n            question.requireAlert.condition === value\r\n        ) {\r\n            triggerAlert(\r\n                question.requireAlert.message,\r\n                question.requireAlert.title,\r\n                goHome,\r\n                'Go Home'\r\n            );\r\n        }\r\n        const updatedAnswers = { [key]: value };\r\n        if (clearIfChange) {\r\n            // clear any answered follow up questions\r\n            clearIfChange.forEach((key: number) => {\r\n                updatedAnswers[key] = null;\r\n            });\r\n        }\r\n        setAnswer({ ...answers, ...updatedAnswers });\r\n    };\r\n\r\n    const getCurVal = (key: string) => {\r\n        return answers[key];\r\n    };\r\n\r\n    return (\r\n        <Container sx={{ display: 'flex', flexDirection: 'column' }}>\r\n            <FieldType\r\n                handleChange={handleChange}\r\n                getCurVal={getCurVal}\r\n                key={question.key}\r\n                question={question.question}\r\n                answerKey={question.key}\r\n                options={question.options}\r\n                questionType={question.type}\r\n                keysToClear={question?.clearIfChange}\r\n            />\r\n        </Container>\r\n    );\r\n};\r\n","import { Container, Typography } from '@mui/material';\r\n\r\ninterface RecordingPageProps {\r\n    phonePosition: string;\r\n    script: string;\r\n    affect: string;\r\n}\r\n\r\nexport const RecordingPage = ({\r\n    phonePosition,\r\n    script,\r\n    affect,\r\n}: RecordingPageProps) => {\r\n    const PhonePosition = () => {\r\n        return (\r\n            <Container sx={{ paddingX: 0 }}>\r\n                <Typography\r\n                    variant=\"h5\"\r\n                    fontWeight=\"fontWeightBold\"\r\n                    sx={{ fontSize: { xs: 18, sm: 18, md: 24 } }}\r\n                >\r\n                    {phonePosition}\r\n                </Typography>\r\n            </Container>\r\n        );\r\n    };\r\n\r\n    const Affect = () => {\r\n        return (\r\n            <Container sx={{ paddingX: 0 }}>\r\n                <Typography\r\n                    variant=\"h5\"\r\n                    sx={{\r\n                        color: 'primary.dark',\r\n                        margin: 2,\r\n                        fontSize: { xs: 18, sm: 18, md: 24 },\r\n                    }}\r\n                    fontWeight=\"fontWeightBold\"\r\n                >\r\n                    Please use this emotion: {affect}\r\n                </Typography>\r\n            </Container>\r\n        );\r\n    };\r\n\r\n    const Script = () => {\r\n        return (\r\n            <Container sx={{ paddingX: 0 }}>\r\n                <Typography\r\n                    variant=\"h5\"\r\n                    fontWeight=\"fontWeightBold\"\r\n                    sx={{ fontSize: { xs: 18, sm: 18, md: 24 } }}\r\n                >\r\n                    Speak: \"a, {script}\"\r\n                </Typography>\r\n                <Typography\r\n                    variant=\"h5\"\r\n                    fontWeight=\"fontWeightBold\"\r\n                    sx={{ fontSize: { xs: 18, sm: 18, md: 24 } }}\r\n                >\r\n                    Shout: \"b, {script}\"\r\n                </Typography>\r\n                <Typography\r\n                    variant=\"h5\"\r\n                    fontWeight=\"fontWeightBold\"\r\n                    sx={{\r\n                        marginBottom: 4,\r\n                        fontSize: { xs: 18, sm: 18, md: 24 },\r\n                    }}\r\n                >\r\n                    Scream: \"c, {script}\"\r\n                </Typography>\r\n                <Typography\r\n                    variant=\"h5\"\r\n                    sx={{ fontSize: { xs: 18, sm: 18, md: 24 } }}\r\n                >\r\n                    You may listen to your audio and record as many times as you\r\n                    like, do not worry about any background noises, we want\r\n                    those! Click next to submit.\r\n                </Typography>\r\n            </Container>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Container\r\n            sx={{\r\n                flex: 1,\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'center',\r\n                textAlign: 'center',\r\n                marginBottom: 3,\r\n                paddingX: 0,\r\n            }}\r\n        >\r\n            <PhonePosition />\r\n            <Affect />\r\n            <Script />\r\n        </Container>\r\n    );\r\n};\r\n","import { StereoAudioRecorder } from 'recordrtc';\r\n\r\nexport const rtcSettings: any = {\r\n    // audio, video, canvas, gif\r\n    type: 'audio',\r\n    mimeType: 'audio/wav',\r\n\r\n    // MediaStreamRecorder, StereoAudioRecorder, WebAssemblyRecorder\r\n    // CanvasRecorder, GifRecorder, WhammyRecorder\r\n    recorderType: StereoAudioRecorder,\r\n\r\n    // disable logs\r\n    disableLogs: true,\r\n\r\n    // get intervals based blobs\r\n    // value in milliseconds\r\n    timeSlice: 1000,\r\n\r\n    // requires timeSlice above\r\n    // returns blob via callback function\r\n    ondataavailable: function (blob: any) {},\r\n\r\n    // auto stop recording if camera stops\r\n    checkForInactiveTracks: false,\r\n\r\n    // requires timeSlice above\r\n    onTimeStamp: function (timestamp: any) {},\r\n\r\n    // both for audio and video tracks\r\n    bitsPerSecond: 128000,\r\n\r\n    // only for audio track\r\n    // ignored when codecs=pcm\r\n    audioBitsPerSecond: 128000,\r\n\r\n    // only for video track\r\n    videoBitsPerSecond: 128000,\r\n\r\n    // used by CanvasRecorder and WhammyRecorder\r\n    // it is kind of a \"frameRate\"\r\n    frameInterval: 90,\r\n\r\n    // if you are recording multiple streams into single file\r\n    // this helps you see what is being recorded\r\n    previewStream: function (stream: any) {},\r\n\r\n    // used by StereoAudioRecorder\r\n    // the range 22050 to 96000.\r\n    // can force a specific rate:\r\n    // sampleRate: 48000,\r\n\r\n    // used by StereoAudioRecorder\r\n    // the range 22050 to 96000.\r\n    // let us force 16khz recording:\r\n    // desiredSampRate: 16000,\r\n\r\n    // used by StereoAudioRecorder\r\n    // Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\r\n    bufferSize: 16384,\r\n\r\n    // used by StereoAudioRecorder\r\n    // 1 or 2\r\n    numberOfAudioChannels: 1,\r\n\r\n    // used by WebAssemblyRecorder\r\n    frameRate: 30,\r\n\r\n    // used by WebAssemblyRecorder\r\n    bitrate: 128000,\r\n\r\n    // used by MultiStreamRecorder - to access HTMLCanvasElement\r\n    elementClass: 'multi-streams-mixer',\r\n};\r\n","// Code from: https://www.geeksforgeeks.org/create-a-stop-watch-using-reactjs/\r\nimport { Typography } from '@mui/material';\r\nimport React from 'react';\r\n\r\nexport default function Timer(props: any) {\r\n    function calculateTimeDuration(secs: any) {\r\n        const hr = Math.floor(secs / 3600);\r\n        const min = Math.floor((secs - hr * 3600) / 60);\r\n        const sec = Math.floor(secs - hr * 3600 - min * 60);\r\n\r\n        const minStr = min < 10 ? '0' + min.toString() : min.toString();\r\n        const secStr = sec < 10 ? '0' + sec.toString() : sec.toString();\r\n\r\n        if (hr <= 0) {\r\n            return minStr + ':' + secStr;\r\n        }\r\n\r\n        return `${hr}:${minStr}:${secStr}`;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"timer\"\r\n            style={{ display: 'flex', alignItems: 'center' }}\r\n        >\r\n            <Typography variant=\"h4\" className=\"digits\">\r\n                {calculateTimeDuration(props.time)}\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n","import { Button, Container } from '@mui/material';\r\nimport { useEffect, useState } from 'react';\r\nimport RecordRTC from 'recordrtc';\r\nimport { rtcSettings } from './recorderSettings';\r\nimport Timer from './Timer.component';\r\nimport MicIcon from '@mui/icons-material/Mic';\r\nimport PauseIcon from '@mui/icons-material/Pause';\r\nimport Tooltip from '@mui/material/Tooltip';\r\n\r\ninterface RecorderProps {\r\n    setRecordingBlob: (blob: Blob) => void;\r\n    displayMessageAlert: (message: string, title?: string) => void;\r\n}\r\n\r\nconst overtimeMessage =\r\n    'You have a limit of 1.5 minute to record the audio. Please give it another try if you were not able to finish. If you did, click next!';\r\n\r\nconst PauseButton = () => (\r\n    <Tooltip title=\"Click to stop recording!\" arrow>\r\n        <PauseIcon\r\n            style={{\r\n                color: 'white',\r\n                background: '#F16D6D',\r\n                padding: 10,\r\n                borderRadius: '50%',\r\n            }}\r\n        />\r\n    </Tooltip>\r\n);\r\n\r\nconst RecordButton = (props: any) => (\r\n    <Tooltip title={props.message} arrow>\r\n        <MicIcon\r\n            style={{\r\n                color: 'white',\r\n                background: '#7DBCff',\r\n                padding: 10,\r\n                borderRadius: '50%',\r\n            }}\r\n        />\r\n    </Tooltip>\r\n);\r\n\r\nexport default function Recorder({\r\n    setRecordingBlob,\r\n    displayMessageAlert,\r\n}: RecorderProps) {\r\n    const [audio, setAudio] = useState<any>(null);\r\n    const [recorder, setRecorder] = useState<RecordRTC>();\r\n    const [url, setUrl] = useState<string>('');\r\n    const [time, setTime] = useState(0);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [isPaused, setIsPaused] = useState(true);\r\n    const [showAudioHTML, setShowAudioHTML] = useState(false);\r\n    const [timeStarted, setTimeStarted] = useState<number | null>(null);\r\n\r\n    useEffect(() => {\r\n        let interval: any = null;\r\n\r\n        if (isActive && !isPaused && timeStarted) {\r\n            interval = setInterval(() => {\r\n                setTime((new Date().getTime() - timeStarted) / 1000);\r\n            }, 100);\r\n        } else {\r\n            clearInterval(interval);\r\n        }\r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n    }, [isActive, isPaused, timeStarted]);\r\n\r\n    const handleStartTimer = () => {\r\n        setIsActive(true);\r\n        setIsPaused(false);\r\n        setTimeStarted(new Date().getTime());\r\n        setTime(0);\r\n    };\r\n\r\n    const handleResetTimer = () => {\r\n        setIsActive(false);\r\n    };\r\n\r\n    const audioStopped = async (recorder: RecordRTC) => {\r\n        if (!recorder) return;\r\n        setUrl(recorder.toURL());\r\n        let blob = await recorder.getBlob();\r\n        setRecordingBlob(blob);\r\n        setShowAudioHTML(true);\r\n        handleResetTimer();\r\n        if (audio.getTracks()) {\r\n            // stop all the tracks for good measure\r\n            audio.getTracks().forEach((track: any) => track.stop());\r\n        }\r\n        setAudio(null);\r\n    };\r\n\r\n    async function getMedia() {\r\n        const constraints = { audio: true, video: false };\r\n\r\n        try {\r\n            let stream = await navigator.mediaDevices.getUserMedia(constraints);\r\n            setAudio(stream);\r\n            let rtc = new RecordRTC(stream, rtcSettings);\r\n            handleStartTimer();\r\n\r\n            // Limit in milliseconds\r\n            let limit = 1500 * 60;\r\n            rtc.setRecordingDuration(limit, function () {\r\n                displayMessageAlert(overtimeMessage);\r\n                rtc.stopRecording(() => {\r\n                    audioStopped(rtc);\r\n                });\r\n            });\r\n\r\n            rtc.startRecording();\r\n            setRecorder(rtc);\r\n        } catch (err) {\r\n            if (err instanceof DOMException) {\r\n                if (\r\n                    err.name === 'NotFoundError' ||\r\n                    err.name === 'DevicesNotFoundError'\r\n                ) {\r\n                    //required track is missing\r\n                    displayMessageAlert(\r\n                        'No microphone was found',\r\n                        'You cannot record without a mic. We reccomend you plug in some headphones and try again'\r\n                    );\r\n                } else if (\r\n                    err.name === 'NotReadableError' ||\r\n                    err.name === 'TrackStartError'\r\n                ) {\r\n                    //webcam or mic are already in use\r\n                    displayMessageAlert(\r\n                        'Your microphone are already in use',\r\n                        'You cannot record if your microphone is being used on another website or app. Please close that app and try again'\r\n                    );\r\n                } else if (\r\n                    err.name === 'OverconstrainedError' ||\r\n                    err.name === 'ConstraintNotSatisfiedError'\r\n                ) {\r\n                    //constraints can not be satisfied by avb. devices\r\n                    displayMessageAlert(\r\n                        'Please allow permission to use microphone',\r\n                        'You cannot record the phrase without allowing permission to use the microphone.'\r\n                    );\r\n                } else if (\r\n                    err.name === 'NotAllowedError' ||\r\n                    err.name === 'PermissionDeniedError'\r\n                ) {\r\n                    //permission denied in browser\r\n                    displayMessageAlert(\r\n                        'Please allow permission to use microphone',\r\n                        'You cannot record the phrase without allowing permission to use the microphone.'\r\n                    );\r\n                } else {\r\n                    //other errors\r\n                    displayMessageAlert(\r\n                        'Something went wrong and you cannot use your microphone',\r\n                        \"You'll have to refresh the page and try again\"\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const toggleMic = async () => {\r\n        if (audio) {\r\n            if (!recorder) return;\r\n            recorder.stopRecording(() => {\r\n                audioStopped(recorder);\r\n            });\r\n        } else {\r\n            await getMedia();\r\n            setShowAudioHTML(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container\r\n            sx={{\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                flexWrap: { xs: 'wrap', sm: 'nowrap' },\r\n            }}\r\n        >\r\n            <Button onClick={() => toggleMic()}>\r\n                {audio ? (\r\n                    <PauseButton />\r\n                ) : (\r\n                    <RecordButton\r\n                        message={\r\n                            url\r\n                                ? 'Click to retry recording again'\r\n                                : 'Click to record'\r\n                        }\r\n                    />\r\n                )}\r\n            </Button>\r\n            {showAudioHTML && (\r\n                <audio\r\n                    style={{\r\n                        width: '100%',\r\n                        maxWidth: 300,\r\n                    }}\r\n                    src={url}\r\n                    controls\r\n                />\r\n            )}\r\n            {audio && <Timer time={time} />}\r\n        </Container>\r\n    );\r\n}\r\n","interface FollowUpQuestion {\r\n    condition: {\r\n        key: string;\r\n        answer: string;\r\n    } | null;\r\n}\r\n\r\ninterface AlertRequiredData {\r\n    condition: string;\r\n    message: string;\r\n    title: string;\r\n}\r\n\r\nexport interface UserQuestion {\r\n    question: string;\r\n    options: Array<string>;\r\n    type: string;\r\n    key: string;\r\n    followUpQuestions?: Array<UserQuestion & FollowUpQuestion>;\r\n    clearIfChange?: Array<string>;\r\n    requireAlert?: AlertRequiredData;\r\n    showCheckboxOptional?: boolean;\r\n}\r\n\r\nconst AGE_RANGES = {\r\n    UNDER_18: 'under 18',\r\n    AGE_18_24: '18-24',\r\n    AGE_25_39: '25-39',\r\n    AGE_40_60: '40-60',\r\n    AGE_60_OVER: '60 and over',\r\n};\r\n\r\nexport const questions: Array<UserQuestion> = [\r\n    {\r\n        question: 'What is your age?',\r\n        options: [\r\n            AGE_RANGES.UNDER_18,\r\n            AGE_RANGES.AGE_18_24,\r\n            AGE_RANGES.AGE_25_39,\r\n            AGE_RANGES.AGE_40_60,\r\n            AGE_RANGES.AGE_60_OVER,\r\n        ],\r\n        type: 'radio',\r\n        key: 'age',\r\n        requireAlert: {\r\n            condition: AGE_RANGES.UNDER_18,\r\n            title: \"Unfortunately, you cannot participate if you're under 18\",\r\n            message:\r\n                'Our website will have features in the future for you to learn more about our discoveries. Check back later!',\r\n        },\r\n    },\r\n    {\r\n        question: 'What is your gender?',\r\n        options: [\r\n            'Man',\r\n            'Woman',\r\n            'Non-Binary',\r\n            'Other',\r\n            'Prefer not to disclose',\r\n        ],\r\n        type: 'radio',\r\n        key: 'gender',\r\n    },\r\n    {\r\n        question: 'What is the the first language you learned?',\r\n        key: 'firstLanguage',\r\n        options: [''],\r\n        type: 'text',\r\n    },\r\n    {\r\n        question: 'What language do you currently use most often?',\r\n        key: 'currentLanguage',\r\n        options: [''],\r\n        type: 'text',\r\n    },\r\n    {\r\n        question: 'What model of phone are you using?',\r\n        key: 'phoneModel',\r\n        options: [''],\r\n        type: 'text',\r\n    },\r\n];\r\n","import { useState } from 'react';\r\nimport { CircularProgress } from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\n/**\r\n * Alert for audio submission. Has multiple states that can be passed into the props\r\n * to display different alerts specific to recording audio\r\n */\r\n\r\nexport enum ALERT_MODE {\r\n    SUCCESS,\r\n    FAILED,\r\n    LOADING,\r\n    INFORM,\r\n}\r\n\r\ninterface SubmitAlertProps {\r\n    open: boolean;\r\n    setOpen: (isOpen: boolean) => void;\r\n    handleAgreeSubmit: (setDisableSubmit: Function) => void;\r\n    alertMode: ALERT_MODE;\r\n    handleClose: () => void;\r\n}\r\n\r\nexport const SubmitAlert = ({\r\n    open,\r\n    setOpen,\r\n    handleAgreeSubmit,\r\n    alertMode,\r\n    handleClose,\r\n}: SubmitAlertProps) => {\r\n    const isLoadingModal = alertMode === ALERT_MODE.LOADING;\r\n    const showCancelButton = alertMode === ALERT_MODE.INFORM;\r\n\r\n    const [disableSubmit, setDisableSubmit] = useState(false);\r\n\r\n    const content = () => {\r\n        switch (alertMode) {\r\n            case ALERT_MODE.SUCCESS:\r\n                return '';\r\n            case ALERT_MODE.FAILED:\r\n                return 'Something went wrong. Give it another try. Click off this box to close.';\r\n            case ALERT_MODE.INFORM:\r\n                return 'You will not be able to go back to the previous questions if you click yes. We have to process your audio in order to retrieve your results.';\r\n            default:\r\n                return '';\r\n        }\r\n    };\r\n\r\n    const title = () => {\r\n        switch (alertMode) {\r\n            case ALERT_MODE.SUCCESS:\r\n                return 'Audio has been successfully submitted!';\r\n            case ALERT_MODE.FAILED:\r\n                return 'Audio has been failed to submit!';\r\n            case ALERT_MODE.INFORM:\r\n                return 'Are you sure you want to submit this audio?';\r\n            case ALERT_MODE.LOADING:\r\n                return 'Hold on, we are submitting your audio.';\r\n            default:\r\n                return '';\r\n        }\r\n    };\r\n\r\n    const buttonText = () => {\r\n        switch (alertMode) {\r\n            case ALERT_MODE.SUCCESS:\r\n                return 'Close';\r\n            case ALERT_MODE.FAILED:\r\n                return 'Try Again';\r\n            case ALERT_MODE.INFORM:\r\n                return 'Submit';\r\n            default:\r\n                return '';\r\n        }\r\n    };\r\n\r\n    const handleCta = () => {\r\n        switch (alertMode) {\r\n            case ALERT_MODE.SUCCESS:\r\n                return handleClose();\r\n            case ALERT_MODE.FAILED:\r\n                return handleAgreeSubmit(setDisableSubmit);\r\n            case ALERT_MODE.INFORM:\r\n                setDisableSubmit(true);\r\n                return handleAgreeSubmit(setDisableSubmit);\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    const handleExit = () => {\r\n        // should not be able to exit when loading\r\n        if (alertMode === ALERT_MODE.LOADING) return;\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            onClose={handleExit}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\"> {title()} </DialogTitle>\r\n            <DialogContent sx={{ display: 'flex', justifyContent: 'center' }}>\r\n                {isLoadingModal ? (\r\n                    <CircularProgress />\r\n                ) : (\r\n                    <DialogContentText> {content()} </DialogContentText>\r\n                )}\r\n            </DialogContent>\r\n            <DialogActions sx={{ padding: 2 }}>\r\n                {showCancelButton && (\r\n                    <Button\r\n                        sx={{ color: 'neutral.dark', marginRight: 1 }}\r\n                        onClick={() => setOpen(false)}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                )}\r\n                {!isLoadingModal && (\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={() => handleCta()}\r\n                        autoFocus\r\n                        disabled={disableSubmit}\r\n                    >\r\n                        {buttonText()}\r\n                    </Button>\r\n                )}\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n","export const consentInfo = [\r\n    {\r\n        title: 'Task Details',\r\n        body: 'You are invited to take part in our collection of shout and scream data. We will be collecting some demographic data to help us understand your voice. Participants will read from a script while moving their phone to various positions around their home. This data will be used in projects to help us detect screams and shouts in two project. The first is an app being built in conjunction with the non-profit organization Haiven to improve the lives of those living with domestic violence. The second is to detect which emotion is being expressed through shouts so that robot agents can better adapt their behaviour to the current context.',\r\n    },\r\n    {\r\n        title: 'Voluntary Participation and Right to Withdraw',\r\n        body: 'Your participation is entirely voluntary. You may end your participation at any point without penalty by stopping your recording and not returning it to the researchers. However, once you have submitted your data it will not be possible to withdraw from the study as the data is stored without collection of your name or contact information. If you are participating in person you may ask the researcher to stop collection at any time.',\r\n    },\r\n    {\r\n        title: 'Procedures',\r\n        body: \"Upon agreeing to this consent form, follow the steps provided by hitting 'next'. Be aware of any disturbances you may contribute to your surroundings. Please begin by filling out the pre-study questionnaire. Next, following the study instructions you will be recording yourself speaking, shouting and screaming several phrases with your phone in different positions around your home. The collection should take approximately 30 minutes. Collection may be done in your own home, or by scheduling a time by emailing ptuttosi@sfu.ca to come in person to either SFU Surrey or Burnaby for assistance and collection of the data.\",\r\n    },\r\n    {\r\n        title: 'Data Retention',\r\n        body: \"Data provided will be stored in a database for the use of future researchers. The data will be stored in ROSIE's Amazon Web Services (AWS) S3 bucket on Canadian servers until the data collection has concluded. Following this the data will be transferred to SFU Vault and the researcher's local computers for the duration of the research. Once research has concluded the data will be destroyed from any local devices and will be stored in the Federated Research Data Repository (FRDR) free to use for research purposes. Commercial use of the data will be provided to Haiven for their use in developing applications to improve the lives of those living with intimate partner violence. No other commercial use will be available.\",\r\n    },\r\n    {\r\n        title: 'Risks/Discomforts',\r\n        body: 'We do not think there is anything in this study that could harm you. It should be noted that this study will involve the need to repeatedly yell random phrases such as \"banana and mustard sandwiches\", if you are concerned that this may cause your neighbours distress or result in punitive action please make them aware and check your surroundings before participating in the study. We suggest that you schedule a time with the researchers by emailing ptuttosi@sfu.ca to complete your participation in person at SFU if you are concerned about your ability to scream in your own home as neither Haiven nor ROSIE Lab will be held responsible for repercussions of this activity.',\r\n    },\r\n    {\r\n        title: 'Benefits',\r\n        body: 'Although it may not directly benefit you, this study will benefit society by providing data for researchers understanding screams and the emotions they convey. Future use cases include scream and shout detection in applications monitoring violence and improving robots abilities to adapt to human emotions or distress.',\r\n    },\r\n    {\r\n        title: 'Compensation',\r\n        body: 'You will receive a 10$ amazon gift card from your completion of this study.',\r\n    },\r\n    {\r\n        title: 'Confidentiality',\r\n        body: \"In this study, we will collect your age group, sex, gender, first language learned and current primary language. However, no directly identifying data (e.g. name, e-mail address) will be stored along with your responses. We note that your voice will be used, and this could potentially be identifiable. Voice recordings will only be accessible by research personnel and will be securely stored as per designated in 'Data Retention'. All email correspondence will be permanently deleted once the conversation has concluded.\",\r\n    },\r\n    {\r\n        title: 'Inclusion and Exclusion Criteria',\r\n        body: 'We set inclusion criteria as those 18 years of age or older and have access to a mobile phone with recording capabilities. Participants should have a sufficient level of English comprehension to understand the consent obligations and follow the written study instructions. If you are participating inclusion criteria includes being fully vaccinated and you must show proof of vaccination to the research personnel. Exclusion criteria includes anyone that is: under the age of 18 years old or does not have access to a mobile phone able to record or is unable to read and understand the consent form and study instructions. If participating in person, not being fully vaccinated will exclude you from this study.',\r\n    },\r\n    {\r\n        title: 'Contact Information',\r\n        body: 'If you have any questions about this study, you may contact ptuttosi@sfu.ca.',\r\n    },\r\n    {\r\n        title: 'Concerns or Complaints',\r\n        body: 'If you have any concerns about your rights as a research participant and/or your experiences while participating in this study, you may contact the SFU Office of Research Ethics at dore@sfu.ca or 778-782-6618.',\r\n    },\r\n    {\r\n        body: 'By selecting one or more of the options below, you are indicating that you have read the consent form, you are age 18 or older, and that you voluntarily agree to participate in this online research study. If you are interested in the results of the study, please check the Haiven and ROSIE websites for progress in our offerings and publications.',\r\n    }\r\n];\r\n","import {\r\n    Checkbox,\r\n    Container,\r\n    FormControlLabel,\r\n    Typography,\r\n} from '@mui/material';\r\nimport { UserAnswersObject } from '../helpers/userAnswers';\r\nimport { consentInfo } from '../helpers/consentInfo';\r\n\r\ninterface ConsentPageProps {\r\n    hasUserConsentResearch: boolean;\r\n    setHasUserConsentResearch: (hasUserConsentResearch: boolean) => void;\r\n    hasUserConsentCommercial: boolean;\r\n    setHasUserConsentCommercial: (hasUserConsentCommercial: boolean) => void;\r\n    setAnswer: (callback: any) => void;\r\n}\r\n\r\nexport const ConsentPage = ({\r\n    hasUserConsentResearch,\r\n    setHasUserConsentResearch,\r\n    hasUserConsentCommercial,\r\n    setHasUserConsentCommercial,\r\n    setAnswer,\r\n}: ConsentPageProps) => {\r\n    return (\r\n        <Container>\r\n            <Typography\r\n                variant=\"h4\"\r\n                sx={{ fontWeight: 'bold', marginBottom: 3 }}\r\n            >\r\n                Shouting Data Collection\r\n            </Typography>\r\n            <Typography variant=\"body1\" sx={{ marginBottom: 2 }}>\r\n                Researchers at Simon Fraser University are collecting emotional shout \r\n                data to help us better detect this behaviour in order to improve detection \r\n                of shouts for multiple uses including robotic assistants and improving safety \r\n                of those living with intimate partner violence.\r\n            </Typography>\r\n            <Typography sx={{ marginBottom: 3 }}>\r\n                <b>\r\n                    Before participating in this study please read the following\r\n                    information.\r\n                </b>\r\n            </Typography>\r\n            {consentInfo.map((info, index) => {\r\n                return (\r\n                    <Container key={index}>\r\n                        <Typography\r\n                            key={`title-${index}`}\r\n                            variant=\"h5\"\r\n                            sx={{ fontWeight: 'bold', marginBottom: 1 }}\r\n                        >\r\n                            {info.title}\r\n                        </Typography>\r\n                        <Typography\r\n                            variant=\"body1\"\r\n                            sx={{ marginBottom: 3 }}\r\n                            key={`body-${index}`}\r\n                        >\r\n                            {info.body}\r\n                        </Typography>\r\n                    </Container>\r\n                );\r\n            })}\r\n\r\n            <Container>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Checkbox\r\n                            onChange={(e) => {\r\n                                setAnswer((oldAnswer: UserAnswersObject) => {\r\n                                    return {\r\n                                        ...oldAnswer,\r\n                                        consentcommercial: e.target.checked,\r\n                                    };\r\n                                });\r\n                                setHasUserConsentCommercial(e.target.checked);\r\n                            }}\r\n                            checked={hasUserConsentCommercial}\r\n                        />\r\n                    }\r\n                    label=\"I have read and accept the consent form\"\r\n                />\r\n\r\n                {!hasUserConsentResearch && !hasUserConsentCommercial && (\r\n                    <Typography\r\n                        variant=\"body2\"\r\n                        sx={{\r\n                            fontWeight: 'bold',\r\n                            marginBottom: 1,\r\n                            color: 'red',\r\n                        }}\r\n                    >\r\n                        You will have to accept at least one option and read the\r\n                        consent form to participate.\r\n                    </Typography>\r\n                )}\r\n            </Container>\r\n        </Container>\r\n    );\r\n};\r\n","export interface UserAnswersObject {\r\n    userID: string;\r\n    age: string | null;\r\n    gender: string | null;\r\n    firstLanguage: string | null;\r\n    currentLanguage: string | null;\r\n    phoneModel: string | null;\r\n    consentresearch: boolean | null;\r\n    consentcommercial: boolean | null;\r\n}\r\n\r\nexport type UserAnswersObjectKeys = keyof UserAnswersObject;\r\n\r\nexport const getUserAnswersDefaultState = (\r\n    canonicalUserID: string\r\n): UserAnswersObject => {\r\n    return {\r\n        userID: canonicalUserID,\r\n        age: null,\r\n        gender: null,\r\n        firstLanguage: null,\r\n        currentLanguage: null,\r\n        phoneModel: null,\r\n        consentresearch: null,\r\n        consentcommercial: null,\r\n    };\r\n};\r\n\r\n\r\nexport const formatUserData = (answers: UserAnswersObject) => {\r\n    return {\r\n        ...answers\r\n    };\r\n};","import { Button, Container, IconButton, Typography } from '@mui/material';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\ninterface MessageAlertProps {\r\n    open: boolean;\r\n    setOpen: (isOpen: boolean) => void;\r\n    message: string;\r\n    title?: string;\r\n    cta?: () => void;\r\n    buttonTitle?: string;\r\n}\r\n\r\nexport const MessageAlert = ({\r\n    open,\r\n    setOpen,\r\n    message,\r\n    title,\r\n    cta,\r\n    buttonTitle,\r\n}: MessageAlertProps) => {\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            onClose={() => setOpen(false)}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'flex-end',\r\n                    alignItems: 'center',\r\n                }}\r\n            >\r\n                {title && (\r\n                    <Container sx={{ textAlign: 'center' }}>\r\n                        <Typography sx={{ fontWeight: 'bold' }}>\r\n                            {title}\r\n                        </Typography>\r\n                    </Container>\r\n                )}\r\n                <IconButton onClick={() => setOpen(false)}>\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            </DialogTitle>\r\n            <DialogContent>{message}</DialogContent>\r\n            <DialogActions sx={{ padding: 2, justifyContent: 'center' }}>\r\n                {cta && buttonTitle && (\r\n                    <Button variant=\"contained\" onClick={cta}>\r\n                        {buttonTitle}\r\n                    </Button>\r\n                )}\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n","import axios from 'axios';\r\nimport * as uuid from 'uuid';\r\n\r\n\r\n/**\r\n * Send Audio to Amazon's S3 cloud storage\r\n * @param {Blob} blob - User's audio recording\r\n * @param {*} metaData - Object which holds the scenerio presented to the user in the form {                \r\n *              userID: string,\r\n                audience: string,\r\n                environment: string,\r\n                script: string\r\n            } \r\n */\r\nexport async function sendS3(blob: Blob, metaData: any) {\r\n    const URL = `https://9ml78r5eaj.execute-api.ca-central-1.amazonaws.com/dev/haiven-shout-data-collect-GetPresignedUrlAndStoreM-vGxHgxBaP0LD`;\r\n    let id: string = uuid.v4();\r\n    let fileName = `shout_data_${id}`;\r\n    let fileType = 'audio/wav';\r\n    metaData['audioID'] = fileName;\r\n\r\n    try {\r\n        // Get the s3 location on where to put the audio file\r\n        const response: any = await axios.post(URL, {\r\n            fileName: fileName,\r\n            fileType: fileType,\r\n            metaData: metaData,\r\n        });\r\n        var signedPostRequest = response.data;\r\n        var fields = signedPostRequest.fields;\r\n\r\n        var options = {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n        };\r\n\r\n        // Put audio file into s3 bucket\r\n        var bodyFormData = new FormData();\r\n        for (var key in fields) {\r\n            bodyFormData.append(key, fields[key]);\r\n        }\r\n\r\n        bodyFormData.append('file', blob, fileName);\r\n        await axios.post(signedPostRequest.url, bodyFormData, options);\r\n\r\n        return fileName;\r\n    } catch (error) {\r\n        throw new Error(`Audio Failed to update: ${error}`);\r\n    }\r\n}\r\n\r\nexport async function sendUserData(data: any) {\r\n    if (!URL) throw new Error(`No USER DATA ENDPOINT`);\r\n    try {\r\n        const response = await axios.post(\"https://a7uhkhvmh3.execute-api.ca-central-1.amazonaws.com/default/haiven-shout-data-collect-WriteUserDataToDynamoFun-bENtV8zxlg0V\", data, {\r\n            headers: {\r\n                'content-type': 'application/json',\r\n            },\r\n        });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(response.statusText);\r\n        }\r\n    } catch (error) {\r\n        throw new Error(`Failed to upload User Data: ${error}`);\r\n    }\r\n}\r\n\r\nexport async function pollResults(audioID: string) {\r\n    const URL = process.env.REACT_APP_POLL_RESULTS;\r\n    if (!URL) throw new Error(`No POLL RESULTS DATA ENDPOINT`);\r\n\r\n    try {\r\n        const response = await axios.get<any>(URL, {\r\n            params: {\r\n                audioID: audioID,\r\n            },\r\n        });\r\n\r\n        // incase anything besides a 200 doesn't thrown an error\r\n        if (response.status !== 200) {\r\n            throw new Error(response.statusText);\r\n        }\r\n    } catch (error) {\r\n        // 404 will be caught here and we don't want it to throw an error\r\n        if (axios.isAxiosError(error)) {\r\n            if (error?.response?.status === 404) return null;\r\n        }\r\n\r\n        throw new Error(`Failed to upload User Data: ${error}`);\r\n    }\r\n}\r\n","// This hook is made using the following tutorial\r\n// https://blog.bitsrc.io/polling-in-react-using-the-useinterval-custom-hook-e2bcefda4197\r\nimport { useEffect, useRef } from 'react';\r\n\r\nexport const useInterval = (callback, delay, flag) => {\r\n    const savedCallback = useRef();\r\n\r\n    useEffect(() => {\r\n        if (flag) {\r\n            savedCallback.current = callback;\r\n        }\r\n    }, [callback, flag]);\r\n\r\n    useEffect(() => {\r\n        function tick() {\r\n            savedCallback.current();\r\n        }\r\n\r\n        if (flag) {\r\n            if (delay !== null) {\r\n                const id = setInterval(tick, delay);\r\n                return () => {\r\n                    clearInterval(id);\r\n                };\r\n            }\r\n        }\r\n    }, [callback, delay, flag]);\r\n};\r\n","import { questions } from './questions';\r\n\r\nexport enum STEP_PAGE {\r\n    CONSENT_PAGE = 0,\r\n    QUESTION_START = 1,\r\n    QUESTION_END = questions.length,\r\n    INFO_PAGE = questions.length + 1,\r\n    FIRST_RECORDING = STEP_PAGE.INFO_PAGE + 1,\r\n}","import { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { Box, Button, Container, Paper } from '@mui/material';\r\nimport { InstructionsPage } from '../pages/InstructionsPage';\r\nimport { ThankYouPage } from '../pages/ThankYouPage';\r\nimport { QuestionsPage } from '../pages/QuestionsPage';\r\nimport { RecordingPage } from '../pages/RecordingPage';\r\nimport Recorder from './recorder/Recorder.component';\r\nimport { questions } from '../helpers/questions';\r\nimport { ConsentPage } from '../pages/ConsentPage';\r\nimport * as uuid from 'uuid';\r\nimport {\r\n    formatUserData,\r\n    getUserAnswersDefaultState,\r\n    UserAnswersObject,\r\n} from '../helpers/userAnswers';\r\nimport { userQuestionAnswerValid } from '../helpers/validator';\r\nimport { SubmitAlert, ALERT_MODE } from './alerts/SubmitAlert.component';\r\nimport { MessageAlert } from './alerts/MessageAlert.component';\r\nimport { pollResults, sendS3, sendUserData } from '../apis/apis';\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { STEP_PAGE } from '../helpers/wizardHelpers';\r\nimport { useCookies } from 'react-cookie';\r\n\r\nconst scriptObj = {\r\n    1: \"banana and mustard sandwiches\",\r\n    2: \"wolf ring lights are fantastic\",\r\n    3: \"hungry action hippos fruit\",\r\n    4: \"another dog secretary show\",\r\n    5: \"snow meteor down the chimney\",\r\n    6: \"birds make new jingles\",\r\n    7: \"heavy undersea birthday pumpkins\",\r\n    8: \"fluffy baseboard yogurt division\",\r\n    9: \"zebra cats walking on lamps\",\r\n    10: \"five special guest treasures\",\r\n    11: \"ripped ocean jumper\",\r\n    12: \"five dollar slaw onion cure\",\r\n    13: \"the thunder break craze\",\r\n    14: \"join the Ear Look club\",\r\n};\r\n\r\nconst affectObj = {\r\n    1: \"neutral\",\r\n    2: \"anger\",\r\n    3: \"joy\",\r\n    4: \"fear\",\r\n    5: \"disgust\",\r\n    6: \"surprise\",\r\n    7: \"sadness\",\r\n};\r\n\r\nconst phonePositions = [\r\n    \"Hold your phone next to your face with the mic facing your mouth as you would in a phone conversation 1/19\",\r\n    \"Hold your phone next to your face but with the mic/phone facing away from your face 2/19\",\r\n    \"Hold your phone next to your face with your hand covering the mic 3/19\",\r\n    \"Hold your phone next to your hip with the back of phone on your palm 4/19\",\r\n    \"Hold your phone next to your hip with your hand covering the mic 5/19\",\r\n    \"Place your phone in your pocket 6/19\",\r\n    \"Place your phone in a bag and hold it next to your hip 7/19\",\r\n    \"Place phone 1-2 meters away face up on any surface 8/19\",\r\n    \"Place phone 1-2 meters away face down on a hard surface 9/19\",\r\n    \"Place phone 1-2 meters away face down on a soft surface 10/19\",\r\n    \"Place phone 1-2 meters away in a bag 11/19\",\r\n    \"Place phone on the opposite side of the room face up on any surface 12/19\",\r\n    \"Place phone on the opposite side of the room face down on a hard surface 13/19\",\r\n    \"Place phone on the opposite side of the room face down on a soft surface 14/19\",\r\n    \"Place phone on the opposite side of the room in a bag 15/19\",\r\n    \"Place phone as far away as possible while on on the opposite side of a wall from you face up on any surface 16/19\",\r\n    \"Place phone as far away as possible while on on the opposite side of a wall from you face down on a hard surface 17/19\",\r\n    \"Place phone as far away as possible while on on the opposite side of a wall from you face down on a soft surface 18/19\",\r\n    \"Place phone as far away as possible while on on the opposite side of a wall from you in a bag 19/19\",\r\n];\r\n\r\ninterface RecordingPageData {\r\n    phoneposition: string | null;\r\n    script: number | null;\r\n    affect: number | null;\r\n};\r\n\r\nfunction getRandomIntInclusive(min: number, max: number): number {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport const Wizard = (props: any) => {\r\n    const [step, setStep] = useState(-1);\r\n    const {\r\n        canonicalUserID,\r\n        setCanonicalUserID,\r\n    } = props;\r\n    const [answers, setAnswer] = useState<UserAnswersObject>(\r\n        getUserAnswersDefaultState(canonicalUserID)\r\n    );\r\n    const [stepCookies, setStepCookie, removeStepCookie] = useCookies(['step']);\r\n    const [userCookies, setUserCookie, removeUserCookie] = useCookies(['userID']);\r\n    const [newUser, setNewUser] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if(userCookies[\"userID\"] === undefined && stepCookies[\"step\"] === undefined) {\r\n          setNewUser(true);\r\n          setUserCookie(\"userID\", canonicalUserID, {path: '/'})\r\n          setStepCookie(\"step\", 0, {path: '/'})\r\n          setStep(0)\r\n        }\r\n      }, [])\r\n\r\n    //const [recordingData, setRecordingData] = useState(\r\n      //  getRecordingData(scenerios, allScripts)\r\n    //);\r\n    const [showSubmitAudioModal, setShowSubmitAudioModal] = useState(false);\r\n    const [showMessageAlert, setShowMessageAlert] = useState(false);\r\n    interface MessageAlert {\r\n        title: string;\r\n        message: string;\r\n        cta?: () => void;\r\n        buttonTitle?: string;\r\n    }\r\n    const [messageAlert, setMessageAlert] = useState<MessageAlert>({\r\n        title: '',\r\n        message: '',\r\n    });\r\n    const [alertMode, setAlertMode] = useState(ALERT_MODE.INFORM);\r\n    const [recordingBlob, setRecordingBlob] = useState<Blob>();\r\n    const [audioId, setAudioId] = useState<string>();\r\n    const [pollFlag, setPollFlag] = useState<Boolean>(false);\r\n    const [pollingRetriesCount, setPollingRetriesCount] = useState<number>(0);\r\n    const [hasUserConsentResearch, setHasUserConsentResearch] = useState<boolean>(false);\r\n    const [hasUserConsentCommercial, setHasUserConsentCommercial] = useState<boolean>(false);\r\n    const [allRecordingPageData, setAllRecordingPageData] = useState<Array<RecordingPageData>>([]);\r\n\r\n\r\n    const handleAnswerChange = useCallback((answer: UserAnswersObject) => {\r\n        setAnswer(answer);\r\n    }, []);\r\n\r\n    const displayMessageAlert = (\r\n        message: string,\r\n        title?: string,\r\n        cta?: () => void,\r\n        buttonTitle?: string\r\n    ) => {\r\n        setMessageAlert({\r\n            title: title || '',\r\n            message,\r\n            cta: cta,\r\n            buttonTitle: buttonTitle,\r\n        });\r\n        setShowMessageAlert(true);\r\n    }\r\n\r\n    const handlePrevStep = () => {\r\n        if (step > 0) setStep(step - 1);\r\n        setStepCookie(\"step\", step - 1, {path: '/'})\r\n    };\r\n\r\n    const handleNextStep = async () => {\r\n        if (onRecordingPage) {\r\n            setShowSubmitAudioModal(true);\r\n            return;\r\n        }\r\n        else if (step === STEP_PAGE.INFO_PAGE){\r\n                const formatData = formatUserData(answers);\r\n                await sendUserData(formatData);\r\n        }\r\n        if (step === -1) {\r\n            setStepCookie(\"step\", step + 2, {path: '/'})\r\n            setStep(step + 2)\r\n        } else if (step < MAX_PAGES) {\r\n            setStepCookie(\"step\", step + 1, {path: '/'})\r\n            setStep(step + 1);\r\n        } else if (step === MAX_PAGES-1) {\r\n            setStepCookie(\"step\", pages.length-1, {path: '/'})\r\n            setStep(pages.length-1);\r\n        }\r\n    };\r\n\r\n    const recordingPages = useMemo(() => phonePositions.map((phonePosition, idx) => {\r\n        // @ts-ignore\r\n        const script = scriptObj[getRandomIntInclusive(1, Object.keys(scriptObj).length)];\r\n        // @ts-ignore\r\n        const affect = affectObj[getRandomIntInclusive(1, Object.keys(affectObj).length)];\r\n        setAllRecordingPageData(prevAllRecordingPageData => [\r\n            ...prevAllRecordingPageData,\r\n            {\r\n                phoneposition: phonePosition,\r\n                affect,\r\n                script,\r\n            }\r\n        ]);\r\n        return (\r\n            <RecordingPage\r\n                phonePosition={phonePosition}\r\n                script={script}\r\n                affect={affect}\r\n            />\r\n        )\r\n    }), []);\r\n\r\n    const removePreviousSessionCookies = () => {\r\n        removeStepCookie('step');\r\n        removeUserCookie('userID');\r\n        setStep(0);\r\n        setUserCookie(\"userID\", canonicalUserID, {path: '/'}) \r\n        setNewUser(true);\r\n    };\r\n\r\n    const resumePreviousSession = () => {\r\n        setNewUser(true);  \r\n        if(parseInt(stepCookies.step, 10) >= questions.length + 2){\r\n          setStep(parseInt(stepCookies.step, 10));\r\n          setCanonicalUserID(userCookies.userID);\r\n        } else {\r\n            removeStepCookie('step');\r\n            removeUserCookie('userID');\r\n            setStep(0);\r\n            setUserCookie(\"userID\", canonicalUserID, {path: '/'}) \r\n        }\r\n    };\r\n\r\n    const pagesBeforeRecordingPages = [\r\n        <ConsentPage\r\n          hasUserConsentResearch={hasUserConsentResearch}\r\n          setHasUserConsentResearch={setHasUserConsentResearch}\r\n          hasUserConsentCommercial={hasUserConsentCommercial}\r\n          setHasUserConsentCommercial={setHasUserConsentCommercial}\r\n          setAnswer={setAnswer}\r\n        />,\r\n        ...questions.map((question, index) => (\r\n            <QuestionsPage\r\n                triggerAlert={displayMessageAlert}\r\n                key={index}\r\n                question={question}\r\n                answers={answers}\r\n                setAnswer={handleAnswerChange}\r\n            />\r\n        )),\r\n        <InstructionsPage/>,\r\n    ];\r\n\r\n    const pagesAfterRecordingPages = [\r\n        <ThankYouPage/>,\r\n    ];\r\n\r\n    const pages = [\r\n        ...pagesBeforeRecordingPages,\r\n        ...recordingPages,\r\n        ...pagesAfterRecordingPages,\r\n    ];\r\n\r\n    const MAX_PAGES = pages.length - 1;\r\n\r\n    const onRecordingPage =\r\n        step === STEP_PAGE.FIRST_RECORDING ||\r\n        (step > STEP_PAGE.FIRST_RECORDING && step <  MAX_PAGES);\r\n\r\n    const processAudio = async (setDisableSubmit: Function) => {\r\n        if (!recordingBlob) {\r\n            setDisableSubmit(false);\r\n            return;\r\n        }\r\n        try {\r\n            const {\r\n                phoneposition,\r\n                affect,\r\n                script,\r\n            } = allRecordingPageData[step - pagesBeforeRecordingPages.length];\r\n            const fileID = await sendS3(recordingBlob, {\r\n                userID: canonicalUserID,\r\n                phoneposition,\r\n                affect,\r\n                script,\r\n            });\r\n\r\n            // for now only poll for the first audio\r\n            if (step === STEP_PAGE.FIRST_RECORDING) {\r\n                setAudioId(fileID);\r\n            }\r\n            setAlertMode(ALERT_MODE.SUCCESS);\r\n            setRecordingBlob(undefined);\r\n            setDisableSubmit(false);\r\n        } catch (e) {\r\n            console.log(e);\r\n            setAlertMode(ALERT_MODE.FAILED);\r\n            setDisableSubmit(false);\r\n            //TESTING\r\n            //setAlertMode(ALERT_MODE.SUCCESS);\r\n            //console.error(\"RESETTING RECORDING BLOB EVEN THOUGH IT WAS NOT SUCCESSFUL, REMOVE IN PRODUCTION\");\r\n            //setRecordingBlob(undefined);\r\n        }\r\n        setDisableSubmit(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (onRecordingPage && !showSubmitAudioModal) {\r\n            setAlertMode(ALERT_MODE.INFORM);\r\n        }\r\n    }, [onRecordingPage, showSubmitAudioModal]);\r\n\r\n    const POLLING_RATE = 10000;\r\n    useInterval(\r\n        async () => {\r\n            // Once on the results page, Polling will stop\r\n            if (audioId) {\r\n                const response = await pollResults(audioId);\r\n                if (response) {\r\n                    setPollFlag(false);\r\n                }\r\n                // no more retries\r\n                if (pollingRetriesCount >= 8) {\r\n                    setPollFlag(false);\r\n                }\r\n\r\n                setPollingRetriesCount(pollingRetriesCount + 1);\r\n            }\r\n        },\r\n        POLLING_RATE,\r\n        pollFlag\r\n    );\r\n\r\n    // this triggers when an audio id is returned from the s3 calls\r\n    // it makes the initial fetch data and if it does not get data it will trigger polling\r\n    useEffect(() => {\r\n        async function fetchData(id: string) {\r\n            const response = await pollResults(id);\r\n            if (!response) {\r\n                setPollFlag(true);\r\n            }\r\n            return response;\r\n        }\r\n        if (onRecordingPage && audioId) {\r\n            fetchData(audioId);\r\n        }\r\n    }, [audioId, onRecordingPage]);\r\n\r\n    const closeModal = () => {\r\n        setShowSubmitAudioModal(false);\r\n        setStep(step + 1);\r\n        setStepCookie(\"step\", step + 1, {path: '/'})\r\n        setAlertMode(ALERT_MODE.INFORM);\r\n    };\r\n\r\n    const canGoToNext = () => {\r\n        if (step === STEP_PAGE.CONSENT_PAGE) {\r\n            return [hasUserConsentResearch, hasUserConsentCommercial];\r\n        }\r\n        if (\r\n            step <= STEP_PAGE.QUESTION_END &&\r\n            step >= STEP_PAGE.QUESTION_START\r\n        ) {\r\n            return userQuestionAnswerValid(\r\n                answers,\r\n                questions[step - STEP_PAGE.QUESTION_START]\r\n            );\r\n        }\r\n        if (onRecordingPage) {\r\n            return !!recordingBlob;\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    const showBackButton =\r\n        step !== -1\r\n        && step !== 0\r\n        && step <= STEP_PAGE.FIRST_RECORDING\r\n\r\n    const showNextButton =\r\n        step !== -1 && step !== MAX_PAGES;\r\n\r\n    const inputItem = () => {\r\n        // this forces the recorder to re-render and restart all of its internal states\r\n        if (step >= STEP_PAGE.FIRST_RECORDING && step !== MAX_PAGES) {\r\n            return (\r\n                <Recorder\r\n                    key={step}\r\n                    setRecordingBlob={setRecordingBlob}\r\n                    displayMessageAlert={displayMessageAlert}\r\n                />\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Paper\r\n                sx={{\r\n                    display: 'flex',\r\n                    flex: 1,\r\n                    flexDirection: 'column',\r\n                    padding: 3,\r\n                }}\r\n            >\r\n                {\r\n                    !newUser\r\n                    && (\r\n                        <div>\r\n                            <div>Do you want to resume where you left off?</div>\r\n                            <Button onClick={resumePreviousSession}>Yes</Button>\r\n                            <Button onClick={removePreviousSessionCookies}>No</Button>\r\n                        </div>\r\n                    )\r\n                }\r\n                <Container sx={{ flex: 1 }}>{pages[step]}</Container>\r\n                <Box\r\n                    sx={{\r\n                        justifyContent: 'space-between',\r\n                        display: 'flex',\r\n                        flexWrap: { xs: 'wrap', sm: 'nowrap' },\r\n                    }}\r\n                >\r\n                    {showBackButton && (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            style={{\r\n                                backgroundColor: \"#db848f\",\r\n                            }}\r\n                            sx={{\r\n                                order: { xs: 1, sm: 0 },\r\n                                width: 70,\r\n                                height: 40,\r\n                                marginTop: { xs: 4, sm: 0 },\r\n                            }}\r\n                            onClick={handlePrevStep}\r\n                        >\r\n                            Back\r\n                        </Button>\r\n                    )}\r\n                    {inputItem()}\r\n                    {showNextButton && (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            style={{\r\n                                backgroundColor: \"#db848f\",\r\n                            }}\r\n                            onClick={handleNextStep}\r\n                            disabled={!canGoToNext()}\r\n                            sx={{\r\n                                order: { xs: 2, sm: 2 },\r\n                                width: 70,\r\n                                height: 40,\r\n                                marginTop: { xs: 4, sm: 0 },\r\n                                marginLeft: { xs: 'auto' },\r\n                            }}\r\n                        >\r\n                            Next\r\n                        </Button>\r\n                    )}\r\n                </Box>\r\n                <SubmitAlert\r\n                    open={showSubmitAudioModal}\r\n                    setOpen={setShowSubmitAudioModal}\r\n                    handleAgreeSubmit={(setDisableSubmit: Function) => processAudio(setDisableSubmit)}\r\n                    alertMode={alertMode}\r\n                    handleClose={closeModal}\r\n                />\r\n                <MessageAlert\r\n                    open={showMessageAlert}\r\n                    setOpen={setShowMessageAlert}\r\n                    message={messageAlert.message}\r\n                    title={messageAlert.title}\r\n                    cta={messageAlert?.cta}\r\n                    buttonTitle={messageAlert?.buttonTitle}\r\n                />\r\n            </Paper>\r\n        </>\r\n    );\r\n};\r\n","import { UserAnswersObject, UserAnswersObjectKeys } from './userAnswers';\r\nimport { UserQuestion } from './questions';\r\n\r\nexport const userQuestionAnswerValid = (\r\n    answers: UserAnswersObject,\r\n    curQuestions: UserQuestion\r\n) => {\r\n    // Blocking currently only occurs on main questions\r\n    const isQuestionBlocked =\r\n        curQuestions?.requireAlert &&\r\n        curQuestions.requireAlert.condition ===\r\n            answers[curQuestions.key as UserAnswersObjectKeys];\r\n    if (isQuestionBlocked) return false;\r\n\r\n    // If main question is answered and has no follow up questions\r\n    const followUpQuestions: Array<any> | undefined =\r\n        curQuestions?.followUpQuestions;\r\n    const isMainQuestionAnswered =\r\n        !!answers[curQuestions.key as UserAnswersObjectKeys];\r\n    if (!followUpQuestions) return isMainQuestionAnswered;\r\n\r\n    // If there are follow up questions, check if they meet the conditions\r\n    // to move on\r\n    const areFollowUpQuestionsAnswered = followUpQuestions.every(\r\n        (question: any) => {\r\n            const isFollowUpQuestionAnswered =\r\n                !!answers[question.key as UserAnswersObjectKeys];\r\n            if (question.condition === null) {\r\n                return isFollowUpQuestionAnswered;\r\n            } else {\r\n                const conditionsAreMet =\r\n                    answers[question.condition.key as UserAnswersObjectKeys] ===\r\n                    question.condition.answer;\r\n\r\n                if (conditionsAreMet) {\r\n                    return isFollowUpQuestionAnswered;\r\n                }\r\n                // if conditions aren't met then question is doesn't have to be answered\r\n                return true;\r\n            }\r\n        }\r\n    );\r\n\r\n    return isMainQuestionAnswered && areFollowUpQuestionsAnswered;\r\n};\r\n","import { createTheme } from '@mui/material';\r\n\r\n// Typescript module augmentation to allow for custom style not\r\n// included in library theme (ie. neutral)\r\ndeclare module '@mui/material/styles' {\r\n    interface Theme {}\r\n\r\n    interface Palette {\r\n        neutral: Palette['primary'];\r\n    }\r\n    interface PaletteOptions {\r\n        neutral: PaletteOptions['primary'];\r\n    }\r\n}\r\n\r\nexport const themedStyles = createTheme({\r\n    palette: {\r\n        primary: {\r\n            light: '#db848f',\r\n            main: '#db848f',\r\n            dark: '#db848f',\r\n            contrastText: '#fff',\r\n        },\r\n        neutral: {\r\n            light: '#db848f',\r\n            main: '#db848f',\r\n            dark: '#db848f',\r\n        },\r\n    },\r\n    components: {\r\n        MuiFilledInput: {\r\n            styleOverrides: {\r\n                root: {\r\n                    backgroundColor: '#db848f',\r\n                    '&:hover': {\r\n                        backgroundColor: '#db848f',\r\n                    },\r\n                    '&.Mui-focused': {\r\n                        backgroundColor: '#db848f',\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        MuiInputLabel: {\r\n            styleOverrides: {\r\n                root: {\r\n                    '&.Mui-focused': {\r\n                        color: '#db848f',\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    },\r\n});\r\n","import Activities from '../../commons/pages/HomePage';\r\nimport { DontateShouts } from '../../activities/DonateShouts/DonateShouts.component';\r\nimport { OurPurpose } from '../pages/OurPurpose';\r\n\r\nexport const routePaths = {\r\n    ACTIVITIES: '/',\r\n    DONATE_SHOUTS: '/donateShouts',\r\n    OUR_PURPOSE: '/ourPurpose',\r\n};\r\n\r\nexport const routes = [\r\n    {\r\n        path: routePaths.ACTIVITIES,\r\n        component: Activities,\r\n    },\r\n    {\r\n        path: routePaths.DONATE_SHOUTS,\r\n        component: DontateShouts,\r\n    },\r\n    {\r\n        path: routePaths.OUR_PURPOSE,\r\n        component: OurPurpose,\r\n    },\r\n];\r\n","import { useState } from 'react';\r\nimport * as uuid from 'uuid';\r\nimport { ThemeProvider } from '@mui/material';\r\nimport { Wizard } from './components/Wizard.component';\r\nimport { themedStyles } from './themedStyles';\r\n\r\nexport const DontateShouts = () => {\r\n    const [canonicalUserID, setCanonicalUserID] = useState(`user_${uuid.v4()}`);\r\n    return (\r\n        <ThemeProvider theme={themedStyles}>\r\n            <Wizard\r\n                canonicalUserID={canonicalUserID}\r\n                setCanonicalUserID={setCanonicalUserID}\r\n            ></Wizard>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n","import { Typography, Container, Link } from '@mui/material';\r\n\r\nexport const OurPurpose = () => {\r\n  return(\r\n    <Container>\r\n      <Typography\r\n        variant=\"h4\"\r\n        sx={{ fontWeight: 'bold', marginBottom: 3 }}\r\n      >\r\n          About ROSIE Lab\r\n      </Typography>\r\n      <Typography\r\n        variant=\"body1\" \r\n        sx={{ marginBottom: 2 }}\r\n      >\r\n          We build robots that are useful, friendly and fun! We believe that robots can help us automate simple, repetitive tasks while bringing joy to our lives.\r\n      </Typography>\r\n      <Typography>\r\n          We work on 3 main areas:\r\n      </Typography>\r\n      <ul>\r\n        <li>Building robots that are useful and interact naturally and seamlessly with humans.</li>\r\n        <li>Developing smart AI software to help robots understand what humans do, think, feel and mean.</li>\r\n        <li>Creating new AI algorithms and implementing models of the human mind based on neuroscience, psychology and developmental science.</li>\r\n      </ul>\r\n      <Typography\r\n        variant=\"body1\" \r\n        sx={{ marginBottom: 2 }}\r\n      >\r\n          To learn more about ROSIE lab see {}\r\n          <Link href=\"https://www.rosielab.ca/\" underline=\"none\">\r\n            our website\r\n          </Link>\r\n      </Typography>\r\n      <Typography\r\n        variant=\"h4\"\r\n        sx={{ fontWeight: 'bold', marginBottom: 3 }}\r\n      >\r\n          About Haiven\r\n      </Typography>\r\n      <Typography\r\n        variant=\"h5\"\r\n        sx={{ fontWeight: 'bold', marginBottom: 3 }}\r\n      >\r\n          Haiven's Mission\r\n      </Typography>\r\n      <Typography variant=\"body1\" sx={{ marginBottom: 2 }}>\r\n        Our mission is to provide victims and survivors of abuse with software services to improve their safety,\r\n        well-being and independence. Haiven is addressing not only the crisis of intimate partner violence but also the\r\n        aftermath by supporting those living with and surviving domestic violence, supporting agency, empowerment\r\n        and security by providing guided access to our network of partnerships.\r\n      </Typography>\r\n      <Typography\r\n          variant=\"h5\"\r\n          sx={{ fontWeight: 'bold', marginBottom: 3 }}\r\n      >\r\n          Haiven's Vision\r\n      </Typography>\r\n      <Typography variant=\"body1\" sx={{ marginBottom: 2 }}>\r\n        Our vision is to be able to create accessible technology and services to help someone through the process of\r\n        exiting an abusive relationship and ensure they have the economic power to leave and stay out of it.\r\n      </Typography>\r\n    </Container>\r\n  );\r\n};\r\n","import { useCallback, useState } from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Container from '@mui/material/Container';\r\nimport Button from '@mui/material/Button';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport '../../index.css';\r\nimport { useHistory } from 'react-router';\r\nimport { routePaths } from '../routes/routes';\r\n\r\nconst pages = [\r\n    { name: 'Data Collection', route: routePaths.ACTIVITIES },\r\n    { name: 'Our Purpose', route: routePaths.OUR_PURPOSE },\r\n];\r\n\r\nconst NavBar = () => {\r\n    const [anchorElNav, setAnchorElNav] = useState(null);\r\n    let history = useHistory();\r\n\r\n    const handleOpenNavMenu = (event: any) => {\r\n        setAnchorElNav(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseNavMenu = () => {\r\n        setAnchorElNav(null);\r\n    };\r\n\r\n    const handleNavigation = useCallback(\r\n        (route: string) => {\r\n            setAnchorElNav(null);\r\n            history.push(route);\r\n        },\r\n        [history]\r\n    );\r\n\r\n    const handleClick = useCallback(\r\n        () => history.push(routePaths.ACTIVITIES),\r\n        [history]\r\n    );\r\n\r\n    return (\r\n        <AppBar position=\"static\" sx={{ backgroundColor: '#db848f' }}>\r\n            <Container maxWidth=\"xl\">\r\n                <Toolbar disableGutters>\r\n                    <Typography\r\n                        variant=\"h6\"\r\n                        noWrap\r\n                        component=\"div\"\r\n                        sx={{ mr: 2, display: { xs: 'none', md: 'flex' } }}\r\n                    ></Typography>\r\n                    <Box\r\n                        sx={{\r\n                            flexGrow: 1,\r\n                            display: { xs: 'flex', md: 'none' },\r\n                        }}\r\n                    >\r\n                        <IconButton\r\n                            size=\"large\"\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls=\"menu-appbar\"\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleOpenNavMenu}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Menu\r\n                            id=\"menu-appbar\"\r\n                            anchorEl={anchorElNav}\r\n                            anchorOrigin={{\r\n                                vertical: 'bottom',\r\n                                horizontal: 'left',\r\n                            }}\r\n                            keepMounted\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'left',\r\n                            }}\r\n                            open={Boolean(anchorElNav)}\r\n                            onClose={handleCloseNavMenu}\r\n                            sx={{\r\n                                display: { xs: 'block', md: 'none' },\r\n                            }}\r\n                        >\r\n                            {pages.map(({ name, route }) => (\r\n                                <MenuItem\r\n                                    key={name}\r\n                                    onClick={() => handleNavigation(route)}\r\n                                >\r\n                                    <Typography textAlign=\"center\">\r\n                                        {name}\r\n                                    </Typography>\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Menu>\r\n                    </Box>\r\n                    <Typography\r\n                        variant=\"h6\"\r\n                        noWrap\r\n                        component=\"div\"\r\n                        onClick={handleClick}\r\n                        sx={{\r\n                            flexGrow: 1,\r\n                            fontFamily: \"'Quicksand', 'sans-serif'\",\r\n                            cursor: 'pointer',\r\n                        }}\r\n                    >\r\n                        ROSIE Lab Shout Collection\r\n                    </Typography>\r\n                    <Box\r\n                        sx={{\r\n                            flexGrow: 0,\r\n                            display: { xs: 'none', md: 'flex' },\r\n                        }}\r\n                    >\r\n                        {pages.map(({ name, route }) => (\r\n                            <Button\r\n                                key={name}\r\n                                onClick={() => {\r\n                                    handleNavigation(route);\r\n                                }}\r\n                                sx={{ my: 2, color: 'white', display: 'block' }}\r\n                            >\r\n                                {name}\r\n                            </Button>\r\n                        ))}\r\n                    </Box>\r\n                </Toolbar>\r\n            </Container>\r\n        </AppBar>\r\n    );\r\n};\r\nexport default NavBar;\r\n","import { Container } from '@mui/material';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport NavBar from './commons/components/NavBar.component';\r\nimport { routes } from './commons/routes/routes';\r\n\r\nconst App = () => {\r\n    return (\r\n        <Router>\r\n            <NavBar />\r\n            <Container\r\n                sx={{\r\n                    padding: { xs: 2, md: 5 },\r\n                    minHeight: '85vh',\r\n                    width: '100vw',\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                }}\r\n                className=\"App\"\r\n            >\r\n                <Switch>\r\n                    {routes.map(({ path, component }) => {\r\n                        return (\r\n                            <Route\r\n                                exact\r\n                                key={path}\r\n                                path={path}\r\n                                component={component}\r\n                            />\r\n                        );\r\n                    })}\r\n                </Switch>\r\n            </Container>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(\r\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n                getCLS(onPerfEntry);\r\n                getFID(onPerfEntry);\r\n                getFCP(onPerfEntry);\r\n                getLCP(onPerfEntry);\r\n                getTTFB(onPerfEntry);\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { CookiesProvider } from 'react-cookie';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <CookiesProvider>\r\n          <App />\r\n        </CookiesProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}